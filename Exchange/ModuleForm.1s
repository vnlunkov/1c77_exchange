////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

Перем НастройкиОбмена;
Перем ПеремСтатусТекеущегоУзла;

////////////////////////////////////////////////////////////////////////////////
// ПРЕДВАРИТЕЛЬНОЕ ОПИСАНИЕ ПРОЦЕДУР И ФУНКЦИЙ
////////////////////////////////////////////////////////////////////////////////

Процедура ПриВыбореУзлаОбмена() Далее

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

Процедура УстановитьСтатусТекущегоУзла(ВхПараметры)
	
	ПеремСтатусТекеущегоУзла = "Не активен";
	
	Если Число(ВхПараметры.Получить("active")) = 1 Тогда
		ПеремСтатусТекеущегоУзла = "Активен";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьCOMОбъект(ВхИмяКласса)
	Попытка 
		ВрмВозврат = СоздатьОбъект(ВхИмяКласса);
	Исключение  
		// СообщитьОЗагрузкеВнешнейКомпоненты("1cpp.dll");
		//ЗапросСКЛ = СоздатьОбъект("ODBCRecordset");
	КонецПопытки;

	Возврат ВрмВозврат;

КонецФункции

Процедура ИнициализироватьWSПроксиДляУправленияОбменомДанными(Прокси, СтруктураНастроек, ПараметрыПрокси, Отказ, СостояниеНастройки, СтрокаСообщенияОбОшибке = "")
	
КонецПроцедуры

Процедура ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "", Знач ТолькоПараметры = 0)

	// ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
	// ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
	
	// // загрузка данных
	// ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузкуДанных();
	
	// Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(СтруктураНастроекОбмена.ИмяПланаОбмена) Тогда
	// 	ПолученыДанныеДляСопоставления = Ложь;
	// 	Если Не ОбработкаОбменаДаннымиXML.КомпонентыОбмена.ФлагОшибки Тогда
	// 		ПолученыДанныеДляСопоставления = (ОбработкаОбменаДаннымиXML.КомпонентыОбмена.НомерВходящегоСообщения > 0
	// 			И ОбработкаОбменаДаннымиXML.КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом = 0);
	// 	КонецЕсли;
	// 	СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить("ПолученыДанныеДляСопоставления", ПолученыДанныеДляСопоставления);
	// КонецЕсли;
	
	// СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
	
	// // Фиксируем состояние выполнения обмена данными.
	// СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
	// СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
	// СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();

КонецПроцедуры

Процедура ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "")

	// ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
	// Если ФормироватьСообщениеОбмена Тогда
	// 	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
	// КонецЕсли;
	
	// // Получаем инициализированную обработку обмена данными.
	// ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
	// ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
	
	// // выгрузка данных
	// ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных();
	
	// Если ФормироватьСообщениеОбмена Тогда
	// 	ТекстовыйФайл = Новый ТекстовыйДокумент;
	// 	ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
	// 	СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
	// 	УдалитьФайлы(ИмяФайлаСообщенияОбмена);
	// КонецЕсли;
	
	// СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
	
	// // Фиксируем состояние выполнения обмена данными.
	// СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
	// СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
	// СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();

КонецПроцедуры

Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Отказ,	УзелИнформационнойБазы, ДействиеПриОбмене, ПараметрыОбмена)

	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = 0; //НастройкиОбменаУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, "Перечисления.ВидыТранспортаСообщенийОбмена.WS", 0);

	// Если СтруктураНастроекОбмена.Отказ Тогда
	// 	// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
	// 	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	// 	Отказ = Истина;
	// 	Возврат;
	// КонецЕсли;
	// СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	// СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	// СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	// СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	// ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
	 	Прокси = 0;
			
	 	ПараметрыПрокси = 0; //Новый Структура;
	// 	ПараметрыПрокси.Вставить("ПараметрыАутентификации", ПараметрыОбмена.ПараметрыАутентификации);
		
	 	СостояниеНастройки = 0;
	 	СообщениеОбОшибке  = "";
	 	ИнициализироватьWSПроксиДляУправленияОбменомДанными(Прокси, СтруктураНастроекОбмена, ПараметрыПрокси, Отказ, СостояниеНастройки, СообщениеОбОшибке);

	// 	Если Отказ Тогда
	// 		ЗаписьЖурналаРегистрацииОбменаДанными(СообщениеОбОшибке, СтруктураНастроекОбмена, Истина);
	// 		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
	// 		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	// 		Возврат;
	// 	КонецЕсли;
		
	// 	ХранилищеСообщенияОбмена = Неопределено;
	 	Попытка
	// 		Прокси.Upload(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, ХранилищеСообщенияОбмена);
	 		ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, "ХранилищеСообщенияОбмена.Получить()");
	 	Исключение
	// 		ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
	// 		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	 	КонецПопытки;
	
	// ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда

		Прокси = 0;//Неопределено;
			
		// ПараметрыПрокси = Новый Структура;
		// ПараметрыПрокси.Вставить("ПараметрыАутентификации", ПараметрыОбмена.ПараметрыАутентификации);
		// Если ПараметрыОбмена.СообщениеДляСопоставленияДанных Тогда
		// 	ПараметрыПрокси.Вставить("МинимальнаяВерсия", "3.0.1.1");
		// КонецЕсли;
		
		СостояниеНастройки = 0;//Неопределено;
		СообщениеОбОшибке  = "";
		ИнициализироватьWSПроксиДляУправленияОбменомДанными(Прокси, СтруктураНастроекОбмена, ПараметрыПрокси, Отказ, СостояниеНастройки, СообщениеОбОшибке);
		
		// Если Отказ Тогда
		// 	ЗаписьЖурналаРегистрацииОбменаДанными(СообщениеОбОшибке, СтруктураНастроекОбмена, Истина);
		// 	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		// 	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		// 	Возврат;
		// КонецЕсли;

	 	СообщениеОбмена = "";
			
	 	Попытка
			
	 		ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, СообщениеОбмена);
			
	// 		// Отправка сообщения обмена только в случае успешной выгрузки данных.
	// 		Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
				
	// 			Прокси.Download(СтруктураНастроекОбмена.ИмяПланаОбмена,
	// 				СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод,
	// 				Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9)));
					
	// 		КонецЕсли;
			
	 	Исключение
	// 		ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
	// 		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	 	КонецПопытки;
		
	// КонецЕсли;
	
	// ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);

	// Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
	// 	Отказ = Истина;
	// КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Ложь, ВхНастройкиСценария);

	ПараметрыОбмена = 0; //ПараметрыОбмена();
	ВрмУзелИнформационнойБазы = "";
	ОтказПоСтрокеСценария = 0;
	ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(ОтказПоСтрокеСценария, ВрмУзелИнформационнойБазы, "Загрузка", ПараметрыОбмена);
	ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(ОтказПоСтрокеСценария, ВрмУзелИнформационнойБазы, "Выгрузка", ПараметрыОбмена);

КонецПроцедуры

Процедура ВыполнитьОбменДаннымиПоРегламентномуЗаданию()

	ВрмНастройкиСценария = 0;
	
	ВыполнитьОбменДаннымиПоСценариюОбменаДанными(0, ВрмНастройкиСценария);
КонецПроцедуры

//******************************************************************************
Функция ВыполнитьКоманду(ВхКоманда, ВхПараметры, ВрмГлобальныеПеременные = 0)

	ИмяОбработкаОбменаДанными = КаталогИБ() + "ExtForms\КонвертацияОбъектовИнформационныхБаз.ert";
	ВрмФормаПараметры = СоздатьОбъект("СписокЗначений");
	ВрмФормаПараметры.ДобавитьЗначение(0, "СтатусВозврата");
	ВрмФормаПараметры.ДобавитьЗначение(ВрмГлобальныеПеременные, "ГлобальныеПеременные");
	ВрмФормаПараметры.ДобавитьЗначение(ВхКоманда, "Команда");
	ВрмФормаПараметры.ДобавитьЗначение(ВхПараметры, "ПараметрыКоманды");

	ОткрытьФормуМодально("Отчет", ВрмФормаПараметры, ИмяОбработкаОбменаДанными);

	Возврат ВрмФормаПараметры;

КонецФункции

Процедура ЗагрузитьНастройкиОбмена()
	
	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметрыВозврата = ВыполнитьКоманду("ЗагрузитьНастройкиОбмена", ВрмПараметры);

	Если Число(ВрмПараметрыВозврата.Получить("СтатусВозврата")) = 0 Тогда
		// Ошибка
		Возврат;
	КонецЕсли;

	НастройкиОбмена = ВрмПараметрыВозврата.Получить("НастройкиОбмена");

	//Заполнение списка узлов на форме
	ВрмИндексТекущегоУзлаОбмена = 0;
	ВрмСписокУзловОбмена = НастройкиОбмена.Получить("УзлыОбмена");
	Для ВрмИндекс = 1 По ВрмСписокУзловОбмена.РазмерСписка() Цикл
		
		ВрмУзелОбменаИдентификатор = "";
		ВрмСписокПараметры = ВрмСписокУзловОбмена.ПолучитьЗначение(ВрмИндекс, ВрмУзелОбменаИдентификатор);
		ЭлСписокУзловОбмена.Установить(ВрмУзелОбменаИдентификатор, ВрмСписокПараметры);

		Если Число(ВрмСписокПараметры.Получить("selected")) = 1 Тогда
			ВрмИндексТекущегоУзлаОбмена = ВрмИндекс;
			ПриВыбореУзлаОбмена();
		КонецЕсли;

	КонецЦикла;

	//Сообщить("ЗагрузитьНастройкиОбмена");

	Если ВрмИндексТекущегоУзлаОбмена > 0  Тогда
		ЭлСписокУзловОбмена.ТекущаяСтрока(ВрмИндексТекущегоУзлаОбмена);
		ПриВыбореУзлаОбмена();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыТекущегоУзла()

	ВрмВозврат = СоздатьОбъект("СписокЗначений"); 
	ВрмИндексТекущегоУзлаОбмена = ЭлСписокУзловОбмена.ТекущаяСтрока();

	Если ВрмИндексТекущегоУзлаОбмена = 0 Тогда
		Возврат ВрмВозврат;
	КонецЕсли;

	ВрмУзелОбменаИдентификатор = "";
	ВрмВозврат = ЭлСписокУзловОбмена.ПолучитьЗначение(ВрмИндексТекущегоУзлаОбмена, ВрмУзелОбменаИдентификатор);
	ВрмВозврат.Установить("Идентификатор", ВрмУзелОбменаИдентификатор);
	
	Возврат ВрмВозврат;

КонецФункции

Функция УстановитьПараметрыТекущегоУзла(ВхПараметры)

	ВрмВозврат = 0;
	
	ВрмИндексТекущегоУзлаОбмена = ЭлСписокУзловОбмена.ТекущаяСтрока();

	Если ВрмИндексТекущегоУзлаОбмена = 0 Тогда
		Возврат ВрмВозврат;
	КонецЕсли;

	ЭлСписокУзловОбмена.УстановитьЗначение(ВрмИндексТекущегоУзлаОбмена, ВхПараметры, ВхПараметры.Получить("Идентификатор"));
	
	НастройкиОбмена.Установить("СохранитьНастройки", 1);

	Возврат 1;

КонецФункции

Процедура СохранитьНастройкиОбмена()

	Если Число(НастройкиОбмена.Получить("СохранитьНастройки")) = 1 Тогда
		ЭлСписокУзловОбмена.Выгрузить(НастройкиОбмена.Получить("УзлыОбмена"));
	КонецЕсли;
	
	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.ДобавитьЗначение(НастройкиОбмена, "НастройкиОбмена");
	ВрмПараметрыВозврата = ВыполнитьКоманду("СохранитьНастройкиОбмена", ВрмПараметры);

	Если Число(ВрмПараметрыВозврата.Получить("СтатусВозврата")) = 0 Тогда
		// Ошибка
	КонецЕсли;

КонецПроцедуры

Процедура АктивироватьТекущийУзелОбмена()
	
	ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.Установить("УзелОбменаИдентификатор", ВрмСписокПараметры.Получить("Идентификатор"));
	ВрмПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ВрмПараметрыВозврата = ВыполнитьКоманду("АктивироватьУзелОбмена", ВрмПараметры);
	ВрмСтатусВозврата = Число(ВрмПараметрыВозврата.Получить("СтатусВозврата"));
	
	Если ВрмСтатусВозврата = 0 Тогда
		// Ошибка
		Сообщить(ВрмПараметрыВозврата.Получить("ОписаниеОшибки"));
		Возврат;
	КонецЕсли;

	УстановитьПараметрыТекущегоУзла(ВрмСписокПараметры);
	УстановитьСтатусТекущегоУзла(ВрмСписокПараметры);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДанных()
	
	ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();

	ВрмГлобальныеПеременные = СоздатьОбъект("СписокЗначений");
	ВрмГлобальныеПеременные.Установить("мНастройкиОбмена", НастройкиОбмена);
	ВрмГлобальныеПеременные.Установить("мРежимОбмена", "Выгрузка");
	ВрмГлобальныеПеременные.Установить("мВыводСообщений", 1);

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.Установить("УзелОбменаИдентификатор", ВрмСписокПараметры.Получить("Идентификатор"));
	ВрмПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ВрмПараметрыВозврата = ВыполнитьКоманду("ВыполнитьВыгрузкуДанных", ВрмПараметры, ВрмГлобальныеПеременные);
	ВрмСтатусВозврата = Число(ВрмПараметрыВозврата.Получить("СтатусВозврата"));
	
	Если ВрмСтатусВозврата = 0 Тогда
		// Ошибка
		Сообщить(ВрмПараметрыВозврата.Получить("ОписаниеОшибки"));
		Возврат;
	КонецЕсли;

	// УстановитьПараметрыТекущегоУзла(ВрмСписокПараметры);

	//ВрмСписокПараметры = ВрмПараметрыВозврата.Получить("СписокПараметры");
	//ЭлСписокУзловОбмена.Установить(ВрмУзелОбменаИдентификатор, ВрмСписокПараметры);
	//Сообщить(ЗначениеВСтроку(ВрмСписокПараметры));

	//УстановитьСтатусТекущегоУзла(ВрмСписокПараметры);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПравилОбмена(ВхИсточник, ВхРежимОбмена)
	
	// ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();
	ВрмГлобальныеПеременные = СоздатьОбъект("СписокЗначений");
	ВрмГлобальныеПеременные.Установить("мРежимОбмена", ВхРежимОбмена);

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.Установить("Источник", ВхИсточник);
	ВрмВозврат = ВыполнитьКоманду("ПолучитьСтруктуруПравилОбмена", ВрмПараметры, ВрмГлобальныеПеременные);
	ВрмСтатусВозврата = Число(ВрмВозврат.Получить("СтатусВозврата"));
	
	Если ВрмСтатусВозврата = 0 Тогда
		// Ошибка
		Сообщить(ВрмВозврат.Получить("ОписаниеОшибки"));
		Возврат ПолучитьПустоеЗначение();
	КонецЕсли;

	Возврат ВрмВозврат.Получить("Результат");

КонецФункции

Процедура ВыполнитьЗагрузкуДанных()
	
	ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();

	ВрмГлобальныеПеременные = СоздатьОбъект("СписокЗначений");
	ВрмГлобальныеПеременные.Установить("мНастройкиОбмена", НастройкиОбмена);
	ВрмГлобальныеПеременные.Установить("мРежимОбмена", "Загрузка");
	ВрмГлобальныеПеременные.Установить("мВыводСообщений", 1);

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.Установить("УзелОбменаИдентификатор", ВрмСписокПараметры.Получить("Идентификатор"));
	ВрмПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ВрмПараметрыВозврата = ВыполнитьКоманду("ВыполнитьЗагрузкуДанных", ВрмПараметры, ВрмГлобальныеПеременные);
	ВрмСтатусВозврата = Число(ВрмПараметрыВозврата.Получить("СтатусВозврата"));
	
	Если ВрмСтатусВозврата = 0 Тогда
		// Ошибка
		Сообщить(ВрмПараметрыВозврата.Получить("ОписаниеОшибки"));
		Возврат;
	КонецЕсли;

	// УстановитьПараметрыТекущегоУзла(ВрмСписокПараметры);

	//ВрмСписокПараметры = ВрмПараметрыВозврата.Получить("СписокПараметры");
	//ЭлСписокУзловОбмена.Установить(ВрмУзелОбменаИдентификатор, ВрмСписокПараметры);
	//Сообщить(ЗначениеВСтроку(ВрмСписокПараметры));

	//УстановитьСтатусТекущегоУзла(ВрмСписокПараметры);
	
КонецПроцедуры

Процедура ТестСоединения()
	
	Если ПустаяСтрока(ЭлURLВебСервиса) = 1 Тогда
		Сообщить("Не заполнен адрес веб-сервиса");
		Возврат;
	КонецЕсли;

	ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	// ВрмПараметры.Установить("УзелОбменаИдентификатор", ВрмСписокПараметры.Получить("Идентификатор"));
	// ВрмПараметры.Установить("НастройкиОбмена", НастройкиОбмена);
	ВрмПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ВрмПараметры.Установить("URLВебСервиса", ЭлURLВебСервиса);
	ВрмПараметрыВозврата = ВыполнитьКоманду("ТестСоединения", ВрмПараметры);
	ВрмСтатусВозврата = Число(ВрмПараметрыВозврата.Получить("СтатусВозврата"));
	
	Если ВрмСтатусВозврата = 0 Тогда
		// Ошибка
		Сообщить(ВрмПараметрыВозврата.Получить("ОписаниеОшибки"));

		Возврат;
	КонецЕсли;

	УстановитьПараметрыТекущегоУзла(ВрмСписокПараметры);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	//ИнициализироватьКомпоненты();
	ЗагрузитьНастройкиОбмена();

КонецПроцедуры

Процедура ПриЗакрытии()
	
	//НастройкиОбмена.Установить("СохранитьНастройки", 1);

	Если ПустоеЗначение(НастройкиОбмена) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(НастройкиОбмена.Получить("СохранитьНастройки")) = 0 Тогда
		СохранитьНастройкиОбмена();
	КонецЕсли;

	НастройкиОбмена = 0;

КонецПроцедуры

Процедура Сформировать()

	
	//ЗначениеВФайл("c:\self\1C\local_sql_khk\Exchange\EDI\rules._1c", ВрмПравилаЗачитанные);
	// ВыполнитьЗагрузкуДанных();
	ВыполнитьВыгрузкуДанных();
	
	//АктивироватьТекущийУзелОбмена();
	//ВрмТаблица = ПолучитьИзмененныеДокументы();
	//ОбновитьНомерОтправленного(ВрмТаблица);
КонецПроцедуры

Процедура ПриВыбореУзлаОбмена()
	
	ВрмИндексУзелОбмена = ЭлСписокУзловОбмена.ТекущаяСтрока();

	Если ВрмИндексУзелОбмена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВрмСписокПараметры = ЭлСписокУзловОбмена.ПолучитьЗначение(ВрмИндексУзелОбмена);

	УстановитьСтатусТекущегоУзла(ВрмСписокПараметры);
	ЭлИмяФайлаПравил = ВрмСписокПараметры.Получить("ИмяФайлаПравил");
	ЭлИмяФайлаПравилКорреспондента = ВрмСписокПараметры.Получить("ИмяФайлаПравилКорреспондента");
	ЭлURLВебСервиса = ВрмСписокПараметры.Получить("soap_uri");

	Если Число(ВрмСписокПараметры.Получить("selected")) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Сообщить("Выбран другой узел. Найстройки сохранить");

	Для ВрмИндекс = 1 По ЭлСписокУзловОбмена.РазмерСписка() Цикл
		
		ВрмСписокПараметры = ЭлСписокУзловОбмена.ПолучитьЗначение(ВрмИндекс);
		ВрмСписокПараметры.Установить("selected", ?(ВрмИндексУзелОбмена = ВрмИндекс, "1", "0"));

	КонецЦикла;

	НастройкиОбмена.Установить("СохранитьНастройки", 1);

КонецПроцедуры

//******************************************************************************
// ВыборФайла(ИмяФайла, Фильтр = "xml")
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ВыборФайла(ИмяФильтра = "", Фильтр = "xml", ТипДиалога = 0)
	
	Каталог = "";
	ВрмВозврат = "";
	
	Стр = ИмяФильтра + " (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(ТипДиалога, ВрмВозврат, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
		
	    ВрмВозврат = Каталог + ВрмВозврат;
		
	КонецЕсли;

	Возврат ВрмВозврат;
	
КонецФункции // ВыборФайла()

//******************************************************************************
// ЗагрузитьПравила(ИмяФайла)
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравила(ИмяФайла, ВхРежимОбмена)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда 
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение("Файл с таким именем не существует!");
		Иначе
			Сообщить("Файл с таким именем не существует!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВрмСуффикс = ?(ВхРежимОбмена = "Загрузка", "Корреспондента", "");

	ВрмСписокПараметры = ПолучитьПараметрыТекущегоУзла();
	ВрмПравилаЗачитанные = ПолучитьСтруктуруПравилОбмена(ИмяФайла, ВхРежимОбмена);
	ВрмСписокПараметры.Установить("ПравилаЗачитанные" + ВрмСуффикс, ЗначениеВСтрокуВнутр(ВрмПравилаЗачитанные));
	ВрмСписокПараметры.Установить("ИмяФайлаПравил" + ВрмСуффикс, ИмяФайла);

	УстановитьПараметрыТекущегоУзла(ВрмСписокПараметры);
	УстановитьСтатусТекущегоУзла(ВрмСписокПараметры);

КонецПроцедуры // ОткрытьФайлДляПросмотра(ИмяФайла)

//******************************************************************************
// ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
    
	Если ИдентЭлемДиалога = "ЭлИмяФайлаПравил" Тогда
	         
		ВрмИмяФайла = ЭлИмяФайлаПравил;
		ЭлИмяФайлаПравил = ВыборФайла("Файл правил");

		Если ЭлИмяФайлаПравил <> ВрмИмяФайла Тогда

		КонецЕсли;
	
	// ИначеЕсли ИдентЭлемДиалога = "ИмяФайлаДанных" Тогда
	         
	// 	ВыборФайла(1, ИмяФайлаДанных, "Файл данных");
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************

ПеремСтатусТекеущегоУзла = "Не активен";