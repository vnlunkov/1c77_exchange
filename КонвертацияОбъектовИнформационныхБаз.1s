////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

Перем мКаталогОбмена;
Перем мНастройкиОбмена;

Перем мКомментироватьВыгрузкуОбъектов;

Перем мПараметрыВыгрузки;

Перем мЧтениеXML;
Перем Параметры;
Перем мТаблицаПравилВыгрузки, мТаблицаПравилКонвертацииОбъектов;
Перем мИд, мНаименование, мДатаВремяСоздания, мКонфигурацияИсточник, мКонфигурацияПриемник, мВерсияФормата;
Перем ВерсияПлатформыПриемника;

Перем мКонвертацияПередПолучениемИзмененныхОбъектов;

Перем мКонвертацияПередВыгрузкойДанных;
Перем мКонвертацияПередВыгрузкойОбъекта;
Перем мКонвертацияПередОтправкойИнформацииОбУдалении;
Перем мКонвертацияПередКонвертациейОбъекта;
Перем мКонвертацияПослеВыгрузкиОбъекта;
Перем мКонвертацияПослеВыгрузкиДанных;
Перем мКонвертацияПослеЗагрузкиПравилОбмена;

Перем мКонвертацияПередЗагрузкойДанных;
Перем мКонвертацияПередЗагрузкойОбъекта;
Перем мКонвертацияПослеЗагрузкиОбъекта;
Перем мКонвертацияПослеЗагрузкиДанных;

Перем мПустоеЗначение;
Перем мСчетчикВыгруженныхОбъектов;
Перем мXMLАнализатор;
//Перем DOMDocument, rootNode;
Перем мНачалоНовогоЭлемента, мИнструкцияОбработки, мКонецУровня, мКонецДокумента;

Перем ТаблицаНастройкиПараметров;
// Перем ТаблицаНастройкиОтбора;
// Перем ПравилаВыгрузкиСписок;
Перем ТаблицаПараметровДляЗагрузки;

Перем ТипыУсловийДляСтрок, ТипыУсловийДляЧисел, ТипыУсловийДляСправочников;
Перем ТипОбъектаДляНастройкиОтбора;
// Перем ОбъектДляНастройкиОтбора;
// Перем КодПВДДляНастройкиОтбора;
// Перем ИмяПВДДляНастройкиОтбора;
Перем СписокОшибок;


Перем ВыводВПротоколИнформационныхСообщений;
Перем ТекущийУровеньВложенностиВыгрузитьПоПравилу;
Перем мСтруктураОшибки;
Перем ПолеФлагОшибки;
Перем ПолеСтрокаСообщенияОбОшибке;
Перем мСообщенияОбОшибках;
Перем ФайлПротоколаДанных; // Файл для ведения протокола обмена данными.
Перем ИмяФайлаПротоколаОбмена;
Перем ФлагКомментироватьОбработкуОбъектов;

Перем мИспользуемыеПравилаВыгрузки; // Список разделенных запятыми правил выгрузки данных, для которых необходимо включить пометку

Перем ЗначенияДляОтбора[100]; // массив для хранения значений, используется для настройки отбора данных

Перем ТаблицаРеквизитов; // таблица для хранения реквизитов, используется для настройки отбора данных

////////////////////////////////////////////////////////////////////////////////
// ПРЕДВАРИТЕЛЬНОЕ ОПИСАНИЕ ПРОЦЕДУР И ФУНКЦИЙ
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьCOMОбъект(ВхИмяКласса) Далее

Функция ВыгрузитьПоПравилу(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО = "", УзелСсылки = "", ТолькоПолучитьУзелСсылки = 0, НомерПКО = 0) Далее
Процедура ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, УзелКоллекцииСвойств = 0, ОбъектКоллекции = 0, ПравилоРодитель = "", ИмяПредопределенногоЭлемента = "", Знач ВыгрузитьТолькоСсылку = 0) Далее
Функция НайтиПравило(Объект, ИмяПравила = "") Далее
Функция ПривестиНомерКДлине(Знач Стр, Длина) Далее
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Далее
Функция ПолучитьЗначение(Объект, Имя, ВхДата = 0) Далее
Функция ПолучитьДатуV8(ЧастьДата, ЧастьВремя = "00:00:00") Далее    
Функция СоздатьЗапрос(ОбъектВыборки, ТабОтбор) Далее       
// Процедура СохранитьНастройкиОтбора() Далее
Процедура ЗафиксироватьОшибку(ТекстОшибки) Далее
// Процедура УстановитьЗначениеПараметраКонвертации(ИмяПараметра, ЗначениеПараметра) Далее

Функция СоздатьУзел(document, name) Далее
Процедура УстановитьАтрибут(element, name, value) Далее
Функция ЗаписатьЭлемент(document, node, name, value = "") Далее
Процедура ДобавитьПодчиненный(parentNode, childNode) Далее

Процедура ИнициализацияСообщений() Далее

////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО ОБРАБОТЧИКОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОКОНЧАНИЕ ОБРАБОТЧИКОВ
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ "Msxml2.DOMDocument.4.0"
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьУзел(document, name)
	
	newNode = document.СоздатьУзел("element", name, "");
	
	Возврат newNode;

КонецФункции // СоздатьУзел()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УстановитьАтрибут(element, name, value)
	//Сообщить("[" + name + "][" + Строка(value) + "]");
	element.УстановитьАтрибут(name, Строка(value));
	
КонецПроцедуры // УстановитьАтрибут()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ЗаписатьЭлемент(document, node, name, value = "")
	
	 childNode = document.СоздатьУзел("element", name, "");
	 Попытка
           childNode.Значение = Строка(value);
     Исключение
           Сообщить("Не удалось записать элемент: "+name+", со значением: "+value);
           childNode.Значение = "";
     КонецПопытки;
	 node.ДобавитьПодчиненный(childNode);
	 
	 Возврат childNode;
    
КонецФункции // одЗаписатьЭлемент()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ДобавитьПодчиненный(parentNode, childNode)
	
	parentNode.ДобавитьПодчиненный(childNode);

КонецПроцедуры // ДобавитьПодчиненный()

Процедура КлонироватьПодчиненным(parentNode, childNode)
	
	ВрмКопируемыйУзел = parentNode.СоздатьПодчиненныйЭлемент(childNode.Наименование);
	
	Для ВрмИндекс = 1 По childNode.КоличествоАтрибутов() Цикл
		ВрмУзел = childNode.ПолучитьУзелАтрибута(ВрмИндекс);
		ВрмКопируемыйУзел.УстановитьАтрибут(ВрмУзел.Наименование, ВрмУзел.Значение);
	КонецЦикла;

	Для ВрмИндекс = 1 По childNode.КоличествоПодчиненных() Цикл
		ВрмУзел = childNode.ПолучитьПодчиненныйПоНомеру(ВрмИндекс);
		Если ВрмУзел.Тип = 1 Тогда
			КлонироватьПодчиненным(ВрмКопируемыйУзел, ВрмУзел);
		Иначе
			ВрмКопируемыйУзел.Значение = ВрмУзел.Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьПодчиненный()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////


Функция ЗапросSOAP(ВхURLВебСервиса, ВхИмяСервиса, ВхТелоЗапроса)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	ВрмВозврат.Установить("СтатусВозврата", 0);
	
	ВрмURI = ВхURLВебСервиса + "/ws/" + ВхИмяСервиса;

	xmlHTTP = CreateObject("MSXML2.XMLHTTP");
	xmlHTTP.open("POST", ВрмURI, 0);
	xmlHTTP.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
	xmlHTTP.setRequestHeader("Authorization", "Basic YWRtaW46MQ==");
	//xmlHTTP.setRequestHeader("SOAPAction", "FileName");
	Попытка
		xmlHTTP.send(ВхТелоЗапроса);
	Исключение
		ВрмВозврат.Установить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат ВрмВозврат;
	КонецПопытки;
	
	//message(xmlHTTP.responseText);
	
	Если xmlHTTP.Status=200 Тогда
		
		ВрмВозврат.Установить("СтатусВозврата", 1);
		ВрмВозврат.Установить("Результат", xmlHTTP.responseText);
		
	Иначе
		
		ВрмТекстОшибки = "";
		
		Попытка
			fault=xmlHTTP.responseXML.selectSingleNode("//faultstring");
			ВрмТекстОшибки = fault.text;
			//ТекстОшибки = xmlHTTP.responseText;
			fault = ПолучитьПустоеЗначение();
		Исключение
			ВрмТекстОшибки = ОписаниеОшибки();
		КонецПопытки;

		ВрмВозврат.Установить("ОписаниеОшибки", ВрмТекстОшибки);
		
	КонецЕсли;	
	
	xmlHTTP = ПолучитьПустоеЗначение();
	
	Возврат ВрмВозврат;
	
КонецФункции

Функция ПолучитьТекстЗапрооса(ВхИмяМетода, ВхПространствоИмен, ВхПараметры = "")
	
	// SOAPAction: "http://www.1c.ru/SaaS/1.0/WS#InterfaceVersion:GetVersions"
	
	// <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	// 	<soap:Body>
	// 		<m:GetVersions xmlns:m="http://www.1c.ru/SaaS/1.0/WS">
	// 			<m:InterfaceName xmlns:xs="http://www.w3.org/2001/XMLSchema"
	// 					xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">РћР±РјРµРЅР”Р°РЅРЅС‹РјРё</m:InterfaceName>
	// 		</m:GetVersions>
	// 	</soap:Body>
	// </soap:Envelope>


	// SOAPAction: "http://www.1c.ru/SSL/Exchange_2_0_1_6#Exchange_2_0_1_6:Ping"
	
	// <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	// 	<soap:Body>
	// 		<m:Ping xmlns:m="http://www.1c.ru/SSL/Exchange_2_0_1_6"/>
	// 	</soap:Body>
	// </soap:Envelope>

	ВрмВозврат = 0;

	ВрмПространствоИменПротокола = "http://schemas.xmlsoap.org/soap/envelope/";

	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	DOMDocument = ВрмПарсерХМЛ.СоздатьДокумент();
	DOMDocument.Кодировка = "UTF-8";
	//DOMDocument = ПолучитьCOMОбъект("AddIn.XMLParser");;
	
	ВрмУзелКонверт = DOMDocument.СоздатьПодчиненныйЭлемент("soap:Envelope", , ВрмПространствоИменПротокола);
	// rootNode.УстановитьПространствоИмен("http://schemas.xmlsoap.org/soap/envelope/", "soap");

	ВрмУзелТело = ВрмУзелКонверт.СоздатьПодчиненныйЭлемент("soap:Body", , ВрмПространствоИменПротокола);

	ВрмУзелМетод = ВрмУзелТело.СоздатьПодчиненныйЭлемент("m:" + ВхИмяМетода, , ВхПространствоИмен);

	Если ТипЗначенияСтр(ВхПараметры) = "СписокЗначений" Тогда
		
		Для ВрмИндексПараметр = 1 По ВхПараметры.РазмерСписка() Цикл
			
			ВрмПараметрИмя = "";
			ВрмПараметрЗначение = ВхПараметры.ПолучитьЗначение(ВрмИндексПараметр, ВрмПараметрИмя);
			ВрмУзелПараметр = ВрмУзелМетод.СоздатьПодчиненныйЭлемент("m:" + ВрмПараметрИмя, , ВхПространствоИмен);
			ВрмУзелПараметр.Значение = ВрмПараметрЗначение;
			ВрмУзелПараметр.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema", "xs");
			ВрмУзелПараметр.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema-instance", "xsi");

			ВрмУзелПараметр = ПолучитьПустоеЗначение();

		КонецЦикла;

	КонецЕсли;
	ВрмУзелМетод = ПолучитьПустоеЗначение();
	ВрмУзелТело = ПолучитьПустоеЗначение();

	ВрмВозврат = ВрмУзелКонверт.ПредставлениеXML;
	
	ВрмУзелКонверт = ПолучитьПустоеЗначение();
	
	DOMDocument = ПолучитьПустоеЗначение();
	ВрмПарсерХМЛ = ПолучитьПустоеЗначение();
	
	Возврат ВрмВозврат;

КонецФункции

Функция ПолучитьВерсииСервиса(ВхОтветSOAP)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");

	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	ВрмДокументXML = ВрмПарсерХМЛ.СоздатьДокумент();
	ВрмДокументXML.Кодировка = "UTF-8";
	ВрмДокументXML.ЗагрузитьИзСтроки(ВхОтветSOAP);
	
	ВрмУзлыОбъекты = ВрмДокументXML.ВыбратьУзлы("//m:return/Value");
	Для ВрмИндексУзелОбъект = 0 По ВрмУзлыОбъекты.КоличествоУзлов() - 1 Цикл
		
		ВрмУзелОбъект = ВрмУзлыОбъекты.ПолучитьУзел(ВрмИндексУзелОбъект);
		ВрмВозврат.ДобавитьЗначение(ВрмУзелОбъект.Значение);
		
	КонецЦикла;

	ВрмДокументXML = ПолучитьПустоеЗначение();
	ВрмПарсерХМЛ = ПолучитьПустоеЗначение();

	Возврат ВрмВозврат;

КонецФункции

Функция SaveFileFromPartsResponse(ВхОтветSOAP)
	
	ВрмВозврат = "";

	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	ВрмДокументXML = ВрмПарсерХМЛ.СоздатьДокумент();
	ВрмДокументXML.Кодировка = "UTF-8";
	ВрмДокументXML.ЗагрузитьИзСтроки(ВхОтветSOAP);
	
	ВрмУзелОбъект = ВрмДокументXML.ВыбратьУзел("//m:FileId");
	ВрмВозврат = ВрмУзелОбъект.Значение;
	
	ВрмДокументXML = ПолучитьПустоеЗначение();
	ВрмПарсерХМЛ = ПолучитьПустоеЗначение();

	Возврат ВрмВозврат;

КонецФункции


Функция ПолучитьОписаниеТипа(ВхОбъект)
	
	ВрмСписок = СоздатьОбъект("СписокЗначений");
	ВрмСтрокаОбъект = ЗначениеВСтроку(ВхОбъект);
	ВрмСписок.ИзСтрокиСРазделителями(ВрмСтрокаОбъект);
	ВрмВозврат = ВрмСписок.ПолучитьЗначение(1);
	Если ВрмСписок.РазмерСписка() > 2 Тогда
		ВрмВозврат = ВрмВозврат + "." + ВрмСписок.ПолучитьЗначение(2);
	КонецЕсли;
	
	Возврат ВрмВозврат;
	
КонецФункции

Процедура УстановитьФлагОшибки(Значение = 1)
	
	ПолеФлагОшибки = Значение;
	
КонецПроцедуры

// Функция-свойство: флаг ошибки выполнения обмена данными.
//
// Возвращаемое значение:
//  Булево - флаг ошибки выполнения обмена данными.
//
Функция ФлагОшибки() Экспорт
	
	Если ТипЗначенияСтр(ПолеФлагОшибки) <> "Число" Тогда
		
		ПолеФлагОшибки = 0;
		
	КонецЕсли;
	
	Возврат ПолеФлагОшибки;
	
КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ")

	Результат = СокрЛП(Стр);
	Пока Длина - СтрДлина(Результат) > 0 Цикл
		Результат = Результат + Чем;
	КонецЦикла;

	Возврат Результат;

КонецФункции

//*****************************************************************************

// Функция-свойство: строка, которая содержит сообщение об ошибке при обмене данными.
//
// Возвращаемое значение:
//  Строка - строка, которая содержит сообщение об ошибке при обмене данными.
//
Функция СтрокаСообщенияОбОшибке() Экспорт
	
	Если ТипЗначенияСтр(ПолеСтрокаСообщенияОбОшибке) <> "Строка" Тогда
		
		ПолеСтрокаСообщенияОбОшибке = "";
		
	КонецЕсли;
	
	Возврат ПолеСтрокаСообщенияОбОшибке;
	
КонецФункции

Процедура ВывестиСодержаниеТЗ(ВхТЗ)

	ВрмСтрока = "";
	Для ВрмИндексКолонки = 1 По ВхТЗ.КоличествоКолонок() Цикл
		ВрмЗначение = ВхТЗ.ПолучитьПараметрыКолонки(ВрмИндексКолонки);
		ВрмСтрока = ВрмСтрока + "[" + ВрмЗначение + "]";
	КонецЦикла;
	Сообщить(ВрмСтрока);
	Для ВрмИндексСтроки = 1 По ВхТЗ.КоличествоСтрок() Цикл
		ВрмСтрока = "";
		Для ВрмИндексКолонки = 1 По ВхТЗ.КоличествоКолонок() Цикл
			ВрмЗначение = ВхТЗ.ПолучитьЗначение(ВрмИндексСтроки, ВрмИндексКолонки);
			ВрмСтрока = ВрмСтрока + "[" + ВрмЗначение + "]";
		КонецЦикла;
		Сообщить(ВрмСтрока);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтрокуТаблицыСписком(ВхТЗ, ВхИндексСтроки)
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	Для ВрмИндексКолонки = 1 По ВхТЗ.КоличествоКолонок() Цикл
		ВрмВозврат.Установить(ВхТЗ.ПолучитьПараметрыКолонки(ВрмИндексКолонки), ВхТЗ.ПолучитьЗначение(ВхИндексСтроки, ВрмИндексКолонки));
	КонецЦикла;
	Возврат ВрмВозврат;
КонецФункции

//*****************************************************************************
Функция ЧислоВХекс(пЧисло)
	
	лМладшиеБиты = пЧисло % 16;
    лСтаршиеБиты = Цел(пЧисло/16);
    
    Если лСтаршиеБиты > 0 Тогда
        лРезультат = ЧислоВХекс(лСтаршиеБиты);
    Иначе
        лРезультат = "";
    КонецЕсли;
    
    ХексСимволы = "0123456789abcdef";
                   
	Возврат лРезультат + Сред(ХексСимволы, лМладшиеБиты + 1, 1);	
    
КонецФункции	// ЧислоВХекс

//*****************************************************************************
Функция ХексВЧисло(пХекс)
	
	лМладшиеБиты = Прав(пХекс, 1);
    лСтаршиеБиты = Лев(пХекс, СтрДлина(пХекс) - 1);
    
    ХексСимволы = "0123456789abcdef";
	
    лРезультат = Найти(ХексСимволы, лМладшиеБиты) - 1;
	
	Если лРезультат = -1 Тогда              
		ош = 1/0; // Ошибка! Параметр не является HEX-значением.
	КонецЕсли;
    
    Если лСтаршиеБиты = "" Тогда
        Возврат лРезультат;
    Иначе
        Возврат ХексВЧисло(лСтаршиеБиты) * 16 + лРезультат;
    КонецЕсли;	
	
КонецФункции	// ХексВЧисло

//*****************************************************************************
Функция СтрокуВХекс(пИсходнаяСтрока)
	
	лДлинаСтроки = СтрДлина(пИсходнаяСтрока);
	лРезультат = "";
	
	Для НомерПозиции = 1 По лДлинаСтроки Цикл
		лСимвол = Сред(пИсходнаяСтрока,НомерПозиции,1);
		лКодСимвола = КодСимв(лСимвол);
		
		лРезультат = лРезультат + ЧислоВХекс(лКодСимвола);
	КонецЦикла;
	
	Возврат лРезультат
	
КонецФункции	// СтрокуВХекс
                              
//*****************************************************************************
Функция ХексВСтроку(пХексСтрока)
	лКоличествоПар = СтрДлина(пХексСтрока) / 2;
	лРезультат = "";
	
	Для лНомерПары = 1 По лКоличествоПар Цикл       
		лНачалоПары = (лНомерПары - 1) * 2 + 1;
		лПараСимволов = Сред(пХексСтрока,лНачалоПары,2);
		
		лРезультат = лРезультат + Симв(ХексВЧисло(лПараСимволов));
	КонецЦикла;
	
	Возврат лРезультат
КонецФункции	// ХексВСтроку


//*****************************************************************************
Функция ПолучитьУникальныйИдентификатор(пСсылка)
	// На выходе должна получиться строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	// X - тип ссылка (справочник, документ). Символ в HEX
	// Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	// Z - ИД объекта. Строка в HEX
                                   
	Если ПустоеЗначение(пСсылка) = 1 Тогда
		Возврат "00000000-0000-0000-0000-000000000000";
	КонецЕсли;
	
	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = ЗначениеВСтрокуВнутр(пСсылка);
	
	// "B","0","0","84","0","0","         1   "
	лСтрокаСРазделителями = Сред(лВнутрСтрока,2,СтрДлина(лВнутрСтрока)-2);
	
	лСписок = СоздатьОбъект("СписокЗначений");
	лСписок.ИзСтрокиСРазделителями(лСтрокаСРазделителями);
	
	лТип = лСписок.ПолучитьЗначение(1); // "B"
	лВид = лСписок.ПолучитьЗначение(4); // "84" - предполагается, что это всегда число, 4-ре цифры.
	лИДОбъекта = лСписок.ПолучитьЗначение(7); // "         1   "
	
	// Преобразование только типизированных значений. 
	// Длина идентификатора должна быть равной 13 символов.
	Если СтрДлина(лИДОбъекта) <> 13 Тогда
		Если СтрДлина(лИДОбъекта) = 23 Тогда // "{"O","0","0","0","0","0","      2457   2231945ЦБ "}"
			лВид = СокрЛП(Лев(лИдОбъекта,10));
			лИДОбъекта = Прав(лИДОбъекта,13);
		Иначе	
			ош = 1/0; // Ошибка! Длина идентификатора ожидается 13 символов.
		КонецЕсли;
	КонецЕсли;
	
	// "42008420202020202020202031202020"
	лРезультат = СтрокуВХекс(лТип) + Формат(лВид,"Ч(0)4") + СтрокуВХекс(лИДОбъекта);
                          
	// "42008420-2020-2020-2020-202031202020"
	лРезультат = Лев(лРезультат,8) + "-" + 
		Сред(лРезультат,9,4) + "-" + 
		Сред(лРезультат,13,4) + "-" + 
		Сред(лРезультат,17,4) + "-" + 
		Прав(лРезультат,12);
	          
	Возврат лРезультат;
КонецФункции	// ПолучитьУникальныйИдентификатор

//*****************************************************************************
Функция ПолучитьСсылкуПоИдентификатору(пИдентификатор)
	// На входе строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	//   X - тип ссылка (справочник, документ). Символ в HEX
	//   Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	//   Z - ИД объекта. Строка в HEX
	// На выходе ссылка на документ/справочник
	
	Если СтрДлина(пИдентификатор) <> 36 Тогда
		ош = 1/0; // Ошибка! Длина идентификатора ожидается 36 символов.
	КонецЕсли;
	
	// "42008420-2020-2020-2020-202031202020"
	// "42008420202020202020202031202020"
	лСтрока = СтрЗаменить(пИдентификатор,"-","");
	 
	лТип = Лев(лСтрока,2); // "42"
	лВид = Строка(Число(Сред(лСтрока,3,4))); // "84"
	лИДОбъекта = Прав(лСтрока,26); // "20202020202020202031202020"
	  
	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = "{"""+ХексВСтроку(лТип)+""",""0"",""0"","""+лВид+""",""0"",""0"","""+ХексВСтроку(лИДОбъекта)+"""}";
	
	лРезультат = ЗначениеИзСтрокиВнутр(лВнутрСтрока);
	
	Возврат лРезультат;
КонецФункции

//*****************************************************************************
Функция ПолучитьСтрокуВнутреннюю(ВхВид, ВхИд)

	ВрмВозврат = "";

	ВрмТаблицаМетаданные = мНастройкиОбмена.Получить("Метаданные");

	ВрмИндекс = 0;
	ВрмТаблицаМетаданные.НайтиЗначение(ВхВид, ВрмИндекс, "Ид");

	Если ВрмИндекс = 0 Тогда
		Возврат ВрмВозврат;
	КонецЕсли;

	ВрмТипСтрока = ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндекс, "Тип");

	// ВрмТипСтрока = Лев(ВрмПредставление, Найти(ВрмПредставление, ".") - 1);

	ВрмСимволТип = "";

	Если ВрмТипСтрока = "Документ" Тогда
		ВрмСимволТип = "O";
	ИначеЕсли ВрмТипСтрока = "Справочник" Тогда
		ВрмСимволТип = "B";
	КонецЕсли;

	ВрмУзелИд = Прав(ВхИД, 3);
	ВрмОбъектИд = _StrToID(Лев(ВхИД, 6));
	ВрмПолныйИД = Прав("         " + ВрмОбъектИд + ВрмУзелИд, 13);

	Возврат "{""" + ВрмСимволТип + """,""0"",""0"",""" + ВхВид + """,""0"",""0"",""" + ВрмПолныйИД + """}";

КонецФункции

Функция ПолучитьCOMОбъект(ВхИмяКласса)
	Попытка 
		ВрмВозврат = СоздатьОбъект(ВхИмяКласса);
	Исключение  
		// СообщитьОЗагрузкеВнешнейКомпоненты("1cpp.dll");
		//ЗапросСКЛ = СоздатьОбъект("ODBCRecordset");
	КонецПопытки;

	Возврат ВрмВозврат;

КонецФункции

Процедура ЗаполнитьЗначенияСвойств(ВхПриемник, ВхИсточник, ВхИсключать = "")
	ВрмИмяСвойства = "";
	ВрмСвойстваИсключаемые = СоздатьОбъект("СписокЗначений");
	ВрмСвойстваИсключаемые.ИзСтрокиСРазделителями(ВхИсключать);
	Для ВрмИндексСвойства = 1 По ВхИсточник.РазмерСписка() Цикл
		ВрмЗначениеСовойства = ВхИсточник.ПолучитьЗначение(ВрмИндексСвойства, ВрмИмяСвойства);
		Если ВрмСвойстваИсключаемые.НайтиЗначение(ВрмИмяСвойства) > 0 Тогда
			Продолжить;
		КонецЕсли;
		ВхПриемник.Установить(ВрмИмяСвойства, ВрмЗначениеСовойства);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтатусВозврата(ВхВозврат)
	ВрмВозврат = 0;
	Если ТипЗначенияСтр(ВхВозврат) = "СписокЗначений" Тогда
		ВрмВозврат = Число(ВхВозврат.Получить("СтатусВозврата"));
	КонецЕсли;
	Возврат ВрмВозврат;
КонецФункции

Функция Разархивировать(ВхПолныйПутьАрхива, ВхПуть)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	
	ВрмПутьРаспаковки = ВхПуть + "\data";
	
	ВрмБД = СоздатьОбъект("BinaryData");
    ВрмБД.UnZip(ВхПолныйПутьАрхива + " " + ВрмПутьРаспаковки);
	
	ВрмМаскаПоиска = ВрмПутьРаспаковки + "\*.xml";
	ВрмФайл = ФС.НайтиПервыйФайл(ВрмМаскаПоиска);
	Пока ПустаяСтрока(ВрмФайл) = 0 Цикл
		ВрмВозврат.ДобавитьЗначение(ВрмФайл);
		ВрмФайл = ФС.НайтиСледующийФайл();
	
	КонецЦикла;
	
	ВрмБД = ПолучитьПустоеЗначение();

	Возврат ВрмВозврат;
	
КонецФункции

Функция Архивировать(ВхПолныйПутьФайла, ВхИмяФайла, ВхПолныйПутьАрхива)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	ВрмСтатусВозврата = 0;
	
	ВрмБД = СоздатьОбъект("BinaryData");
	ВрмБД.ПодключитьсяКФайлу(ВхПолныйПутьФайла);
	ВрмБД.pkAppendFile(ВхПолныйПутьАрхива, ВхИмяФайла);
	ВрмБД.Закрыть();
	
	Если ФС.СуществуетФайл(ВхПолныйПутьАрхива) = 1 Тогда
		ВрмСтатусВозврата = 1;
		ВрмВозврат.Установить("Результат", ВхПолныйПутьАрхива);
	КонецЕсли;

	ВрмВозврат.Установить("СтатусВозврата", ВрмСтатусВозврата);
	ВрмБД = ПолучитьПустоеЗначение();
	
	Возврат ВрмВозврат;
	
КонецФункции

Функция РазложитьПолноеИмяФайла(ВхПолноеИмяФайла)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	
	ВрмТекст = СтрЗаменить(ВхПолноеИмяФайла, "\", РазделительСтрок);
	ВрмИмяФайла = СтрПолучитьСтроку(ВрмТекст, СтрКоличествоСтрок(ВрмТекст));
	ВрмКаталог = Лев(ВхПолноеИмяФайла, СтрДлина(ВхПолноеИмяФайла) - СтрДлина(ВрмИмяФайла));
	
	ВрмТекст = СтрЗаменить(ВрмИмяФайла, ".", РазделительСтрок);
	ВрмРасширение = СтрПолучитьСтроку(ВрмТекст, СтрКоличествоСтрок(ВрмТекст));
	ВрмИмяФайлаБезРасширения = Лев(ВрмИмяФайла, СтрДлина(ВрмИмяФайла) - СтрДлина(ВрмРасширение) - 1);
	
	ВрмВозврат.Установить("ИмяФайла", ВрмИмяФайла);
	ВрмВозврат.Установить("Каталог", ВрмКаталог);
	ВрмВозврат.Установить("ИмяФайлаБезРасширения", ВрмИмяФайлаБезРасширения);
	ВрмВозврат.Установить("Расширение", ВрмРасширение);
	
	Возврат ВрмВозврат;
	
КонецФункции

Функция CombineFile(ВхСписокФайлов, ВхПолныйПуть)

	_str_read=СоздатьОбъект("ADODB.Stream");
    _str_read.Type=1;
	_str_read.Open();
	
	_str_write=СоздатьОбъект("ADODB.Stream");
    _str_write.Type=1;
	_str_write.Open();
	
	for _idx = 1 to ВхСписокФайлов.РазмерСписка() do
	    
		_file = ВхСписокФайлов.ПолучитьЗначение(_idx);
		
		_str_read.LoadFromFile(_file);
        _str_read.CopyTo(_str_write);
	
	enddo;
	
	_str_write.SaveToFile(ВхПолныйПуть, 2);
	
КонецФункции

Функция SplitFile(ВхПолныйПуть, ВхРазмерБайт = 1024)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	
	ВрмЧастиИмениФайла = РазложитьПолноеИмяФайла(ВхПолныйПуть);
	
	ВрмКаталог = ВрмЧастиИмениФайла.Получить("Каталог");
	ВрмИмяФайла = ВрмЧастиИмениФайла.Получить("ИмяФайла");
	
	_idx = 1;
	
	_str_write = СоздатьОбъект("ADODB.Stream");
	_str_write.Type = 1;
	_str_write.Open();
	
	_str_read = СоздатьОбъект("ADODB.Stream");
	_str_read.Type = 1;
	_str_read.Open();
	_str_read.LoadFromFile(ВхПолныйПуть);
	
	while _str_read.EOS = 0 do
		
		ВрмПолныйПутьЧасти = Шаблон("[ВрмКаталог][ВрмИмяФайла].[_idx]");
		_str_read.CopyTo(_str_write, ВхРазмерБайт * 1024);
		_str_write.SaveToFile(ВрмПолныйПутьЧасти, 2);
		_str_write.Position = 0;
        _str_write.SetEOS();
		
		ВрмВозврат.Установить(_idx, ВрмПолныйПутьЧасти);
		_idx = _idx + 1;
	
	enddo;
	
	_str_read.Close();
	_str_write.Close();
	
	Возврат ВрмВозврат;
	
КонецФункции

Функция FileBase64ToFile(ВхИсточник, ВхПриемник)
	
	_cdo = СоздатьОбъект("CDO.Message");
    
	_bp = _cdo.BodyPart;
	_bp.Charset = "windows-1251";
	_bp.ContentTransferEncoding="base64";
	
    _str_write = _bp.GetEncodedContentStream();
    _str_write.LoadFromFile(ВхИсточник);
    _str_write.Flush();
	
    _bp.SaveToFile(ВхПриемник);
	_str_write.Close();

	_cdo = ПолучитьПустоеЗначение();
	
КонецФункции

Функция FileToFileBase64(ВхИсточник, ВхПриемник)
	
	_cdo = СоздатьОбъект("CDO.Message");
    
	_bp = _cdo.AddAttachment(ВхИсточник);
	
	_bp.Charset = "windows-1251";
	_bp.ContentTransferEncoding = "base64";
	
	_str_write = _bp.GetEncodedContentStream();
	_str_write.Type = 1;
	_str_write.SaveToFile(ВхПриемник, 2);
	_str_write.Close();

	_cdo = ПолучитьПустоеЗначение();
	
КонецФункции

Функция СтрокаВФайл(ВхСтрока, ВхПолныйПуть)
	
	Стрим=СоздатьОбъект("ADODB.Stream");
    Стрим.Type=2;
    Стрим.charset="windows-1251";
    Стрим.Open();
	Стрим.WriteText(ВхСтрока);
    Стрим.SaveToFile(ВхПолныйПуть);
	
	Возврат 0;
	//Текст=СоздатьОбъект("Текст");
    //Текст.ДобавитьСтроку(ВхСтрока);
    //Текст.Записать(ВхПолныйПуть);
	//Текст="";
КонецФункции

Функция ФайлВСтроку(ВхПолныйПуть)
	
	Стрим=СоздатьОбъект("ADODB.Stream");
    Стрим.Type=2; 
    Стрим.charset="windows-1251";
    Стрим.Open();
    Стрим.LoadFromFile(ВхПолныйПуть);
	Стрим.Flush();
    Возврат Стрим.ReadText();
	
КонецФункции

//*****************************************************************************  

Процедура ЗаполнитьСписокУзловИзБД(ВхСписокУзловОбмена)
	
	ВрмЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	ВрмТекстЗапроса ="
		|SELECT
		|	T_DBSET.DBSIGN,
		|	T_SYSTEM.DBSIGN AS DBSELF,
		|	T_DBSET.DBDESCR,
		|	T_DBSET.DBSTATUS,
		|	T_DBSET.DBUUID,
		|	CASE WHEN T_DBSET.DBSTATUS = 'C' THEN 1 ELSE 0 END AS ACTIVE
		|FROM
		|	_1SDBSET T_DBSET
		|INNER JOIN _1SSYSTEM T_SYSTEM ON 1=1
		|WHERE
		|	T_DBSET.DBFMODE != 0";
	
	ВрмТаблицаУзлыОбмена = ВрмЗапросСКЛ.ВыполнитьИнструкцию(ВрмТекстЗапроса);

	ВрмТаблицаУзлыОбмена.ВыбратьСтроки();
	Пока ВрмТаблицаУзлыОбмена.ПолучитьСтроку() = 1 Цикл
		
		ВрмСписокПараметры = СоздатьОбъект("СписокЗначений");
		ВрмСписокПараметры.Установить("descr", СокрЛП(ВрмТаблицаУзлыОбмена.DBDESCR));
		ВрмСписокПараметры.Установить("selected", "1");
		ВрмСписокПараметры.Установить("id_self", СокрЛП(ВрмТаблицаУзлыОбмена.DBSELF));
		ВрмСписокПараметры.Установить("id_remote", СокрЛП(ВрмТаблицаУзлыОбмена.DBSIGN));
		ВрмСписокПараметры.Установить("active", ВрмТаблицаУзлыОбмена.ACTIVE);
		ВрмСписокПараметры.Установить("uuid", ВрмТаблицаУзлыОбмена.DBUUID);

		ВхСписокУзловОбмена.Установить(СокрЛП(ВрмТаблицаУзлыОбмена.DBSIGN), ВрмСписокПараметры);
		
	КонецЦикла;

	мНастройкиОбмена.Установить("СохранитьНастройки", 1);

	ВрмЗапросСКЛ = 0;
	
КонецПроцедуры

Функция АктивироватьУзелОбмена(ВхУзелОбменаИдентификатор, ВхСписокПараметры)
	
	ВрмВозврат = 0;

	ВрмЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	//ВрмТекстЗапроса = "UPDATE _1SDBSET SET DBSTATUS = 'C' WHERE RTRIM(DBSIGN) = '" + ВхУзелОбменаИдентификатор + "'";// AND DBSTATUS != 'C'";
	ВрмТекстЗапроса = "UPDATE _1SDBSET SET DBSTATUS = 'C' WHERE RTRIM(DBSIGN) = '" + ВхУзелОбменаИдентификатор + "' AND DBSTATUS != 'C'";

	//Сообщить(ВрмТекстЗапроса);

	ВрмВозврат = ВрмЗапросСКЛ.ВыполнитьИнструкцию(ВрмТекстЗапроса);
	Если ВрмВозврат = 1 Тогда
		Сообщить("Инициализация узла с кодом [" + ВхУзелОбменаИдентификатор + "] успешна завершена.");
		Предупреждение("Необходимо перезапустить ИБ!");
	Иначе
		Сообщить("Узлу с кодом [" + ВхУзелОбменаИдентификатор + "] не требуется активация.");
	КонецЕсли;

	Если ФС.СуществуетФайл(мКаталогОбмена) = 0 Тогда
		ФС.СоздатьКаталог(мКаталогОбмена);
	КонецЕсли;

	ВрмКаталогОбменаУзла = мКаталогОбмена + ВхУзелОбменаИдентификатор + "\";

	Если ФС.СуществуетФайл(ВрмКаталогОбменаУзла) = 0 Тогда
		ФС.СоздатьКаталог(ВрмКаталогОбменаУзла);
	КонецЕсли;

	ВхСписокПараметры.Установить("active", ВрмВозврат);
	ВхСписокПараметры.Установить("path", ВрмКаталогОбменаУзла);

	ЗапросСКЛ = 0;

	Возврат ВрмВозврат;
	
КонецФункции

Процедура ОбновитьНомерОтправленного(ВхУзелОбменаИдентификатор, ВхПакетНомер = 0)

	ЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	ВрмСтрокаЗапрос = "
		|UPDATE T_UPDTS
		| SET T_UPDTS.DWNLDID = RIGHT('      ' + RTRIM('" + _IdToStr(ВхПакетНомер) + "'), 6) + LTRIM(T_SYSTEM.DBSIGN)
		|FROM _1SUPDTS T_UPDTS
		|INNER JOIN _1SSYSTEM T_SYSTEM ON T_UPDTS.DBSIGN = '" + ВхУзелОбменаИдентификатор + "' AND T_UPDTS.DWNLDID = 'FFFFFFFFF';
		|
		|INSERT INTO _1SDWNLDS SELECT RIGHT('      ' + RTRIM('" + _IdToStr(ВхПакетНомер) + "'), 6) + LTRIM(DBSIGN) DWNLDID, '" + ВхУзелОбменаИдентификатор + "' DBSIGN, 'O' DIRECT, '' ACKNOWL  FROM _1SSYSTEM;
		|";

	// Сообщить(ВрмСтрокаЗапрос);
	ЗапросСКЛ.ВыполнитьСкалярный(ВрмСтрокаЗапрос);
	ЗапросСКЛ = 0;

КонецПроцедуры

Функция ВыбратьИзменения(ВхУзелОбменаИдентификатор, ВхТаблицаВыгружаемыхМетаданных, ВхПакетНомер = 0)

	ЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	ЗапросСКЛ.ВыполнитьСкалярный("
		|UPDATE _1SUPDTS SET DWNLDID = 'FFFFFFFFF' WHERE DBSIGN = '" + ВхУзелОбменаИдентификатор + "' AND DWNLDID = '';
		|
		|IF OBJECT_ID('tempdb..#ТаблВрем', 'U') IS NOT NULL
		|	DROP TABLE #ТаблВрем;
		|
		|CREATE TABLE #ТаблВрем (
		|	TYPEID int);
		|");

	//Собственно вставка строк
	ЗапросСКЛ.Подготовить("INSERT INTO #ТаблВрем (TYPEID) VALUES (?)");
	ВрмВозврат = ЗапросСКЛ.ВыполнитьSQL_ИзТЗ(ВхТаблицаВыгружаемыхМетаданных);

	ВрмСтрокаЗапрос = "
		|SELECT
		|	T_UPDTS.DBSIGN,
		|	T_UPDTS.TYPEID,
		|	T_UPDTS.OBJID,
		|	T_UPDTS.DELETED,
		|	T_UPDTS.DWNLDID
		|FROM _1SUPDTS T_UPDTS
		|INNER JOIN #ТаблВрем T_TMP
		|	ON T_UPDTS.TYPEID = T_TMP.TYPEID
		|WHERE
		|	T_UPDTS.DBSIGN = '" + ВхУзелОбменаИдентификатор + "'
		|	AND T_UPDTS.DWNLDID > ''";

	// Если ПустаяСтрока(ВхПакетНомер)  = 0 Тогда
	// 	ВрмСтрокаЗапрос = ВрмСтрокаЗапрос + "
	// 	|	AND LTRIM(SUBSTRING(T_UPDTS.DWNLDID, 1, 6)) < '" + ВхПакетНомер + "'";
	// КонецЕсли;

	ВрмСтрокаЗапрос = ВрмСтрокаЗапрос + "
		|ORDER BY T_UPDTS.TYPEID, T_UPDTS.OBJID";

	// Сообщить(ВрмСтрокаЗапрос);

	ВрмВозврат = ЗапросСКЛ.ВыполнитьИнструкцию(ВрмСтрокаЗапрос);

	ЗапросСКЛ.ВыполнитьСкалярный("
	|IF OBJECT_ID('tempdb..#ТаблВрем', 'U') IS NOT NULL
  	|	DROP TABLE #ТаблВрем;
	|");

	Возврат ВрмВозврат;
КонецФункции

Функция ПолучитьНомерОтправленного(ВхУзелОбменаИдентификатор)

	ВрмВозврат = 0;

	ВрмЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	ВрмТекстЗапроса = "SELECT max(DWNLDID) FROM _1SDWNLDS WHERE RTRIM(DBSIGN) = '" + ВхУзелОбменаИдентификатор + "' AND DIRECT = 'O'";
	
	ВрмТаблицаЗначения = ВрмЗапросСКЛ.ВыполнитьИнструкцию(ВрмТекстЗапроса); // Здесь нужно установить блокировку таблицы до записи.
	
	Если ВрмТаблицаЗначения.КоличествоСтрок() = 1 Тогда
		ВрмНомерПакета = ВрмТаблицаЗначения.ПолучитьЗначение(1, 1);
		ВрмВозврат = _StrToId(Лев(ВрмНомерПакета, 6));
	Иначе
		ВрмВозврат = 0;
	КонецЕсли;

	Возврат ВрмВозврат;

КонецФункции

Процедура УвеличитьMessageNo()
	// Увеличивается номер исходящего пакета для узла УРБД
	// Для вновь изменных данных заполняется идентификатор отправленного пакета.
	

	
	// лMessageNo = НомерИсходящейКвитанции + 1;

	// лИдентификаторПакета = _IdToStr(лMessageNo) + ЦентральнаяИБКод();
	
	// лТекстЗапроса = "INSERT INTO _1SDWNLDS VALUES ('" + лИдентификаторПакета + "','" + ПрефиксУзлаУРБД + "','O','')";
	
	// Если ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса) = 1 Тогда
		
	// 	// Заполняем идентификатор пакета для новых измененных данных.
	// 	лТекстЗапроса = "UPDATE _1SUPDTS SET DWNLDID = '" + лИдентификаторПакета + "' WHERE DBSIGN = '" + ПрефиксУзлаУРБД + "' AND DWNLDID = ''";
		
	// 	ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса);
		
	// 	MessageNo = лMessageNo;
	// Иначе
	// 	ош = 1/0; // Ошибка при увеличении MessageNo. 
	// КонецЕсли;
КонецПроцедуры

Процедура ОчиститьИзмененныеОбъекты(ВхУзелОбменаИдентификатор, ВхПакетНомер = 0)
	     
	// Если ВхПакетНомер = 0 Тогда
	// 	Если Вопрос("Очистить измененные объекты?","Да+Нет+Отмена") <> "Да" Тогда
	// 		Возврат;
	// 	КонецЕсли;
	// КонецЕсли;
	
	// Если ВхПакетНомер > 0 Тогда
	// 	ВрмПакетИдентификатор = _IdToStr(ВхПакетНомер) + ТекущаяИБКод();
	// 	ВрмТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ВхУзелОбменаИдентификатор + "' AND DWNLDID <= '" + ВрмПакетИдентификатор + "'";
	// Иначе
	// 	ВрмТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ВхУзелОбменаИдентификатор + "'";
	// КонецЕсли;
	
	// ВрмЗапросСКЛ = ПолучитьCOMОбъект("ODBCRecordset");

	// лКоличествоУдаленных = ВрмЗапросСКЛ.ВыполнитьИнструкцию(ВрмТекстЗапроса);
	
	// Если пНомерКвитанции = 0 Тогда // Значит интерактив
	// 	Сообщить("Очищено зарегистрированных изменений: " + лКоличествоУдаленных);
	// КонецЕсли;

	// ЗапросСКЛ = 0;

КонецПроцедуры	// ОчиститьИзмененныеОбъекты()


//Уровень: 1 - администрирование; 2 - изменение данных; 3 - информация; 4 - предупреждение; 5 - ошибка. Значение по умолчанию 3
Процедура ЗаписьЖурналаРегистрацииОбменДанными(Комментарий, Уровень = 3)
	
	Если Уровень = 3 Тогда
		Уровень = 5;
	КонецЕсли;
	
	// ОбъектМетаданных = Неопределено;
	
	// Если     УзелОбменаЗагрузкаДанных <> Неопределено
	// 	И Не УзелОбменаЗагрузкаДанных.Пустая() Тогда
		
	// 	ОбъектМетаданных = УзелОбменаЗагрузкаДанных.Метаданные();
		
	// КонецЕсли;
	
	//ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации(), Уровень, ОбъектМетаданных,, Комментарий);
	ЗаписьЖурналаРегистрации(Комментарий, "Обработка", "Обмен данными", , Уровень);
	
КонецПроцедуры

// Возвращает объект типа структура, содержащий все возможные поля
// записи протокола выполнения (сообщения об ошибках и т.п.).
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Объект типа структура
// 
Функция ЗаписьПротоколаОбмена(КСообщенияОбОшибках = "", Знач СтрокаОшибки = "")

	СтруктураОшибки = ПолучитьПустоеЗначение();
	мСтруктураОшибки.Выгрузить(СтруктураОшибки);
	
	СтрокаМодуля              = "";//ОтделитьРазделителем(СтрокаОшибки, "{");
	ВрмОписаниеОшибки            = "";//ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ПустаяСтрока(ВрмОписаниеОшибки) = 0 Тогда
		
		СтруктураОшибки.Установить("ОписаниеОшибки", ВрмОписаниеОшибки);
		СтруктураОшибки.Установить("ПозицияМодуля", СтрокаМодуля);
				
	КонецЕсли;
	
	Если ПустаяСтрока(КСообщенияОбОшибках) = 0 Тогда
		
		СтруктураОшибки.Установить("КСообщенияОбОшибках", КСообщенияОбОшибках);
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции

Процедура ИнициализироватьВедениеПротоколаОбмена(ВхУзелОбменаИдентификатор)
	
	// Если ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
	// 	ФайлПротоколаДанных = Неопределено;
	// 	ФлагКомментироватьОбработкуОбъектов = ВыводВОкноСообщенийИнформационныхСообщений;		
	// 	Возврат;
		
	// Иначе	
		
	// 	ФлагКомментироватьОбработкуОбъектов = ВыводВПротоколИнформационныхСообщений ИЛИ ВыводВОкноСообщенийИнформационныхСообщений;		
		
	// КонецЕсли;
	
	// Попытка записи в файл протокола обмена.
	Попытка
		
		ВрмИнфо = ПолучитьCOMОбъект("AddIn.V7SysInfo");
		ВрмГлобальноУникальныйИдентификатор = ВрмИнфо.СоздатьGUID();
		ВрмИнфо = ПолучитьПустоеЗначение();
		
		ВрмКаталогПротоколаОбмена = мКаталогОбмена + ВхУзелОбменаИдентификатор + "\Log\";
		Если ФС.СуществуетФайл(ВрмКаталогПротоколаОбмена) = 0 Тогда
			ФС.СоздатьКаталог(ВрмКаталогПротоколаОбмена);
		КонецЕсли;
		
		ИмяФайлаПротоколаОбмена = ВрмКаталогПротоколаОбмена + ВрмГлобальноУникальныйИдентификатор + ".txt";

		ФайлПротоколаДанных = СоздатьОбъект("Текст");
		ФайлПротоколаДанных.КодоваяСтраница(0);
		//ФайлПротоколаДанных.Открыть(ИмяФайлаПротоколаОбмена);
		//Новый ЗаписьТекста(ИмяФайлаПротоколаОбмена, КодировкаТекста.ANSI, , ДописыватьДанныеВПротоколОбмена);
	Исключение
		ФайлПротоколаДанных = ПолучитьПустоеЗначение();
		ВрмОписаниеОшибки = ОписаниеОшибки();
		СтрокаСообщения = Шаблон("Ошибка при попытке записи в файл протокола данных: '[ИмяФайлаПротоколаОбмена]'. Описание ошибки: [ВрмОписаниеОшибки]");
		ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, 3);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗавершитьВедениеПротоколаОбмена()
	
	Если ФайлПротоколаДанных = ПолучитьПустоеЗначение() Тогда
		
		Возврат;
				
	КонецЕсли;

	Попытка
		ФайлПротоколаДанных.Записать(ИмяФайлаПротоколаОбмена);
	Исключение
		ФайлПротоколаДанных = ПолучитьПустоеЗначение();
		ВрмОписаниеОшибки = ОписаниеОшибки();
		СтрокаСообщения = Шаблон("Ошибка при попытке записи в файл протокола данных: '[ИмяФайлаПротоколаОбмена]'. Описание ошибки: [ВрмОписаниеОшибки]");
		ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, 3);
	КонецПопытки;

	ФайлПротоколаДанных = ПолучитьПустоеЗначение()
	
КонецПроцедуры


// Сохраняет в протокол выполнения (или выводит на экран) сообщения указанной структуры.
//
// Параметры:
//  Код               - Число. Код сообщения.
//  СтруктураЗаписи   - Структура. Структура записи протокола.
//  ВзвестиФлагОшибок - Если истина, то - это сообщение об ошибке. Взводится ФлагОшибки.
// 
Функция ЗаписатьВПротоколВыполнения(Код = "",
	СтруктураЗаписи=0,
	ВзвестиФлагОшибок=1,
	Уровень=0,
	Выравнивание=22,
	БезусловнаяЗаписьВПротоколОбмена = 0,
	Знач РезультатВыполненияОбмена = 0) Экспорт
//
	Отступ = "";
	Для Сч = 0 По Уровень-1 Цикл
	Отступ = Отступ + СимволТабуляции;
	КонецЦикла; 

	Если ТипЗначенияСтр(Код) = "Число" Тогда
		
		Если мСообщенияОбОшибках.РазмерСписка() = 0 Тогда
			ИнициализацияСообщений();
		КонецЕсли;
		
		Стр = "";
		мСообщенияОбОшибках.ПолучитьЗначение(Стр, Код);
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;

	Стр = Отступ + Стр;
	
	Если ПустоеЗначение(СтруктураЗаписи) = 0 Тогда
		
		Для ВрмИндексЗаписи = 0 По СтруктураЗаписи.РазмерСписка() Цикл
			
			Ключ = "";
			Значение = СтруктураЗаписи.ПолучитьЗначение(ВрмИндексЗаписи, Ключ);
			Если ПустоеЗначение(Значение) = 1 Тогда
				Продолжить;
			КонецЕсли; 
			Стр  = Стр + РазделительСтрок + Отступ + СимволТабуляции + одДополнитьСтроку(Ключ, Выравнивание) + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЛитералПеревода = ?(ПустаяСтрока(СтрокаСообщенияОбОшибке()) = 1, "", РазделительСтрок);
	
	ПолеСтрокаСообщенияОбОшибке = Стр;
	
	Если ВзвестиФлагОшибок = 1 Тогда
		
		УстановитьФлагОшибки();
		
		// РезультатВыполненияОбмена = ?(РезультатВыполненияОбмена = Неопределено,
		// 								Перечисления.РезультатыВыполненияОбмена.Ошибка,
		// 								РезультатВыполненияОбмена);
		//
	КонецЕсли;
	
	// УстановитьРезультатВыполненияОбмена(РезультатВыполненияОбмена);
	
	Если ПустоеЗначение(ФайлПротоколаДанных) = 0 Тогда
		
		Если ВзвестиФлагОшибок = 1 Тогда
			
			// ФайлПротоколаДанных.ДобавитьСтроку(РазделительСтрок + "Ошибка.");
			ФайлПротоколаДанных.ДобавитьСтроку("Ошибка.");
			
		КонецЕсли;
		
		//Если ВзвестиФлагОшибок = 1 ИЛИ БезусловнаяЗаписьВПротоколОбмена = 1 ИЛИ ВыводВПротоколИнформационныхСообщений = 1 Тогда
		Если (ВзвестиФлагОшибок + БезусловнаяЗаписьВПротоколОбмена + ВыводВПротоколИнформационныхСообщений) > 0 Тогда
			
			//ФайлПротоколаДанных.ДобавитьСтроку(РазделительСтрок + СтрокаСообщенияОбОшибке());
			ФайлПротоколаДанных.ДобавитьСтроку(СтрокаСообщенияОбОшибке());
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполненияОбмена = 0 Тогда
		
		УровеньЖР = 5;
		
	Иначе
		
		УровеньЖР = 3;
		
	КонецЕсли;
	
	// Фиксируем событие в журнале регистрации.
	ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщенияОбОшибке(), УровеньЖР);
	
	Возврат СтрокаСообщенияОбОшибке();

КонецФункции

Функция ЗаписатьИнформациюОбОшибкеВПротокол(КСообщенияОбОшибках, СтрокаОшибки, Объект, ТипОбъекта = "")

	ЗП         = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.Объект  = Объект;

	Если ПустаяСтрока(ТипОбъекта) = 0 Тогда
		ЗП.ТипОбъекта     = ТипОбъекта;
	КонецЕсли;	

	СтрокаОшибки = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);	

	Возврат СтрокаОшибки;

КонецФункции

Процедура ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравилаОчисткиДанных, Объект = "", ИмяОбработчика = "")

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПОД                    = ИмяПравилаОчисткиДанных;

	Если Объект <> "" Тогда
	ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗначенияСтр(Объект) + ")";
	КонецЕсли;

	Если ИмяОбработчика <> "" Тогда
	ЗП.Обработчик             = ИмяОбработчика;
	КонецЕсли;

	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);

	// Если ПродолжитьПриОшибке = 0 Тогда
	// 	ВызватьИсключение СтрокаСообщенияОбОшибке;
	// КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравила, Источник = "", 
ТипОбъекта, Объект = 0, ИмяОбработчика)

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ИмяПКО                 = ИмяПравила;
	ЗП.ТипОбъекта             = ТипОбъекта;
	ЗП.Обработчик             = ИмяОбработчика;

	Если ПустаяСтрока(Источник) = 0 Тогда

		ЗП.Источник           = Источник;

	КонецЕсли;

	Если ПустоеЗначение(Объект) = 0 Тогда

		ЗП.Объект                 = Строка(Объект);

	КонецЕсли;

	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);

	// Если ПродолжитьПриОшибке = 0 Тогда
	// 	ВызватьИсключение СтрокаСообщенияОбОшибке;
	// КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(КСообщенияОбОшибках, СтрокаОшибки, ПКО, Источник, ИмяОбработчика)

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";

	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗначенияСтр(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗначенияСтр(Источник) + ")";
	КонецПопытки;

	ЗП.Обработчик             = ИмяОбработчика;

	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);

	// Если ПродолжитьПриОшибке = 0 Тогда
	// 	ВызватьИсключение СтрокаСообщенияОбОшибке;
	// КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КСообщенияОбОшибках, СтрокаОшибки, ПКО, ПКС, Источник = "", 
ИмяОбработчика = "", Значение = 0)

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	ЗП.ПКС                    = ПКС.Имя + "  (" + ПКС.Наименование + ")";

	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗначенияСтр(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗначенияСтр(Источник) + ")";
	КонецПопытки;

	ЗП.СвойствоПриемника      = ПКС.Приемник + "  (" + ПКС.ТипПриемника + ")";

	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик         = ИмяОбработчика;
	КонецЕсли;

	Если ПустоеЗначение(Значение) = 0 Тогда
		ЗП.КонвертируемоеЗначение = Строка(Значение) + "  (" + ТипЗначенияСтр(Значение) + ")";
	КонецЕсли;

	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);

	// Если ПродолжитьПриОшибке = 0 Тогда
	// 	ВызватьИсключение СтрокаСообщенияОбОшибке;
	// КонецЕсли;

КонецПроцедуры	

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПВД(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравила, ИмяОбработчика, Объект = 0)

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПВД                    = ИмяПравила;

	Если ПустоеЗначение(Объект) = 0 Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗначенияСтр(Объект) + ")";
	КонецЕсли;

	ЗП.Обработчик             = ИмяОбработчика;

	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);

	// Если ПродолжитьПриОшибке = 0 Тогда
	// 	ВызватьИсключение СтрокаСообщенияОбОшибке;
	// КонецЕсли;

КонецПроцедуры

Функция ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(КСообщенияОбОшибках, СтрокаОшибки, ИмяОбработчика)

	ЗП                        = ЗаписьПротоколаОбмена(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.Обработчик             = ИмяОбработчика;
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	Возврат СтрокаСообщенияОбОшибке;

КонецФункции


//******************************************************************************
//
//
// Параметры:
//
// 
// Описание:
//
// Процедура УстановитьЗначениеПараметраКонвертации(ИмяПараметра, ЗначениеПараметра)
	
// 	НомерСтроки = 0;
	
// 	Если ТаблицаНастройкиПараметров.НайтиЗначение(ИмяПараметра, НомерСтроки, "Имя") = 1 Тогда
		
// 		ТаблицаНастройкиПараметров.УстановитьЗначение(НомерСтроки, "Значение", ЗначениеПараметра)
// 	Иначе
		
// 		Сообщить("Значение параметра """ + ИмяПараметра + """ не установлено! Возможно, имя параметра указано не верно или параметр не редактируется в диалоге.", "!");
		
// 	КонецЕсли;
	
// КонецПроцедуры //УстановитьЗначениеПараметраКонвертации()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВывестиСообщение(ТекстСообщения, СтатусСообщения = " ")
	
	Сообщить(ТекстСообщения, СтатусСообщения);
	
КонецПроцедуры // ВывестиСообщение()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиБулевоКЗначению(Булево)
	
	Если Врег(Булево) = "TRUE" Тогда
		
		Возврат 1;
	
	ИначеЕсли Врег(Булево) = "FALSE" Тогда
		
		Возврат 0;
	
	Иначе
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции // ПривестиБулевоКЗначению()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиЗначениеКБулево(Значение)
	
	Если Число(Значение) > 0 Тогда
		
		Возврат "true";
		
	Иначе
		
		Возврат "false";
		
	КонецЕсли;
	
КонецФункции // ПривестиЗначениеКБулево()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПроверитьИмяТипУзла(Узел, ПроверяемоеИмя = "", ТипТега = "", ПроверяемыйТип = "")
	
	Если (ТипТега <> "") И (ПроверяемыйТип <> "") Тогда
		
		Если ТипТега = ПроверяемыйТип Тогда
			
			Если ПроверяемоеИмя <> "" Тогда
				
				Если Узел.СвойстваТекущегоУзла.Имя = ПроверяемоеИмя Тогда
					
					Возврат 1;
					
				Иначе
					
					Возврат 0;
				
				КонецЕсли;
			
			Иначе
				
				Возврат 1;
				
			КонецЕсли;
			
		Иначе
			
			Возврат 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ПроверяемоеИмя <> "" Тогда
			
			Если Узел.СвойстваТекущегоУзла.Имя = ПроверяемоеИмя Тогда
				
				Возврат 1;
				
			Иначе
				
				Возврат 0;
			
			КонецЕсли;
		
		Иначе
			
			ВывестиСообщение("Неверно переданы параметры в функцию ""ПроверитьИмяТипУзла"".", "!!!");
			Возврат 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПроверитьИмяТипУзла()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьДатуV8(ЧастьДата, ЧастьВремя = "00:00:00")
	
	Если (ПустоеЗначение(ЧастьДата) = 1) ИЛИ (ЧастьДата = Дата(1,1,1)) Тогда
		Возврат "0001-01-01T" + ЧастьВремя;
		
	Иначе
		// Год может быть введен неверно
		Год = ДатаГод(ЧастьДата);
		
		// Возможно случайно ошиблись и не доввели дату
		Если Год < 30 Тогда
			Год = 2000 + Год;
			
		ИначеЕсли Год < 100 Тогда
			Год = 1900 + Год;
			
		ИначеЕсли Год < 1000 Тогда
			Год = 1000 + Год;
			
		КонецЕсли;
		
		// Если исправления не помогли, тогда вернем пустой год
		// Иначе данные просто не загрузятся
		Если Год < 1900 Тогда
			Возврат "0001-01-01T" + ЧастьВремя;
		КонецЕсли;
		
		Возврат "" + Год + "-" + Формат(ДатаМесяц(ЧастьДата),"Ч(0)2") + "-" + Формат(ДатаЧисло(ЧастьДата),"Ч(0)2") + "T" + ЧастьВремя;
	
	КонецЕсли;

КонецФункции // ПолучитьДатуV8()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "")

	Стр	= СокрЛП(Стр);
	Префикс	= Стр;
	Длина = СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		
		ЧисловаяЧасть = Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			
			Префикс	= Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    
				Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
				
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			
			Стр = Прав(Стр, Длина - Сч);
			
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда
			
			ЧисловаяЧасть = - ЧисловаяЧасть;
			
		КонецЕсли;
			
	КонецЦикла;
	              
	Если Режим = "Число" Тогда
	    
		Возврат(ЧисловаяЧасть);
		
	Иначе
		
		Возврат(Префикс);
		
	КонецЕсли;

КонецФункции // ПолучитьПрефиксЧислоНомера()

// Добавляет к префиксу номера или кода подстроку
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добаляемая к префиксу подстрока;
//  Длина        - требуемая результрирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева")

	Стр = СтрЗаменить(СокрЛП(Стр)," ","");

	Если ПустаяСтрока(Длина) = 1 Тогда
		Длина = СтрДлина(Стр);
	КонецЕсли;

	ЧисловаяЧасть   = "";
	Префикс         = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);

	Если Режим = "Слева" Тогда
		Результат = СокрЛП(Добавок) + Префикс;
	Иначе
		Результат = Префикс + СокрЛП(Добавок);
	КонецЕсли;

	Пока Длина - СтрДлина(Результат) - СтрДлина(СтрЗаменить(СокрЛП(ЧисловаяЧасть)," ","")) > 0 Цикл
		Результат = Результат + "0";
	КонецЦикла;

	Результат = Результат + СтрЗаменить(СокрЛП(ЧисловаяЧасть)," ","");

	Возврат(Результат);

КонецФункции // ДобавитьКПрефиксу()


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиНомерКДлине(Знач Стр, Длина)

	Стр = СокрЛП(Стр);

	ЧисловаяЧасть = "";
	Результат = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);

	Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
		
		Результат = Результат + "0";
		
	КонецЦикла;

	Результат = Результат + ЧисловаяЧасть;

	Возврат(Результат);

КонецФункции // ПривестиНомерКДлине()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ
////////////////////////////////////////////////////////////////////////////////

// Инициализирует переменную СообщенияОбОшибках, содержащую соответствия кодов сообщений их описаниям.
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияСообщений()

	мСообщенияОбОшибках			= СоздатьОбъект("СписокЗначений");
		
	мСообщенияОбОшибках.Установить(2, "Ошибка распаковки файла обмена. Файл заблокирован.");
	мСообщенияОбОшибках.Установить(3, "Указанный файл правил обмена не существует.");
	мСообщенияОбОшибках.Установить(4, "Ошибка при создании COM-объекта Msxml2.DOMDocument");
	мСообщенияОбОшибках.Установить(5, "Ошибка открытия файла обмена");
	мСообщенияОбОшибках.Установить(6, "Ошибка при загрузке правил обмена");
	мСообщенияОбОшибках.Установить(7, "Ошибка формата правил обмена");
	мСообщенияОбОшибках.Установить(8, "Некорректно указано имя файла для выгрузки данных"); // не используется
	мСообщенияОбОшибках.Установить(9, "Ошибка формата файла обмена");
	мСообщенияОбОшибках.Установить(10,"Не указано имя файла для выгрузки данных (Имя файла данных)");
	мСообщенияОбОшибках.Установить(11,"Ссылка на несуществующий объект метаданных в правилах обмена");
	мСообщенияОбОшибках.Установить(12,"Не указано имя файла с правилами обмена (Имя файла правил)");
			
	мСообщенияОбОшибках.Установить(13,"Ошибка получения значения свойства объекта (по имени свойства источника)");
	мСообщенияОбОшибках.Установить(14,"Ошибка получения значения свойства объекта (по имени свойства приемника)");
	
	мСообщенияОбОшибках.Установить(15,"Не указано имя файла для загрузки данных (Имя файла для загрузки)");
			
	мСообщенияОбОшибках.Установить(16,"Ошибка получения значения свойства подчиненного объекта (по имени свойства источника)");
	мСообщенияОбОшибках.Установить(17,"Ошибка получения значения свойства подчиненного объекта (по имени свойства приемника)");
	мСообщенияОбОшибках.Установить(18,"Ошибка при создании обработки с кодом обработчиков");
	мСообщенияОбОшибках.Установить(19,"Ошибка в обработчике события ПередЗагрузкойОбъекта");
	мСообщенияОбОшибках.Установить(20,"Ошибка в обработчике события ПриЗагрузкеОбъекта");
	мСообщенияОбОшибках.Установить(21,"Ошибка в обработчике события ПослеЗагрузкиОбъекта");
	мСообщенияОбОшибках.Установить(22,"Ошибка в обработчике события ПередЗагрузкойДанных (конвертация)");
	мСообщенияОбОшибках.Установить(23,"Ошибка в обработчике события ПослеЗагрузкиДанных (конвертация)");
	мСообщенияОбОшибках.Установить(24,"Ошибка при удалении объекта");
	мСообщенияОбОшибках.Установить(25,"Ошибка при записи документа");
	мСообщенияОбОшибках.Установить(26,"Ошибка записи объекта");
	мСообщенияОбОшибках.Установить(27,"Ошибка в обработчике события ПередОбработкойПравилаОчистки");
	мСообщенияОбОшибках.Установить(28,"Ошибка в обработчике события ПослеОбработкиПравилаОчистки");
	мСообщенияОбОшибках.Установить(29,"Ошибка в обработчике события ПередУдалениемОбъекта");
	
	мСообщенияОбОшибках.Установить(31,"Ошибка в обработчике события ПередОбработкойПравилаВыгрузки");
	мСообщенияОбОшибках.Установить(32,"Ошибка в обработчике события ПослеОбработкиПравилаВыгрузки");
	мСообщенияОбОшибках.Установить(33,"Ошибка в обработчике события ПередВыгрузкойОбъекта");
	мСообщенияОбОшибках.Установить(34,"Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	мСообщенияОбОшибках.Установить(41,"Ошибка в обработчике события ПередВыгрузкойОбъекта");
	мСообщенияОбОшибках.Установить(42,"Ошибка в обработчике события ПриВыгрузкеОбъекта");
	мСообщенияОбОшибках.Установить(43,"Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	мСообщенияОбОшибках.Установить(45,"Не найдено правило конвертации объектов");
		
	мСообщенияОбОшибках.Установить(48,"Ошибка в обработчике события ПередОбработкойВыгрузки группы свойств");
	мСообщенияОбОшибках.Установить(49,"Ошибка в обработчике события ПослеОбработкиВыгрузки группы свойств");
	мСообщенияОбОшибках.Установить(50,"Ошибка в обработчике события ПередВыгрузкой (объекта коллекции)");
	мСообщенияОбОшибках.Установить(51,"Ошибка в обработчике события ПриВыгрузке (объекта коллекции)");
	мСообщенияОбОшибках.Установить(52,"Ошибка в обработчике события ПослеВыгрузки (объекта коллекции)");
	мСообщенияОбОшибках.Установить(53,"Ошибка в глобальном обработчике события ПередЗагрузкойОбъекта (конвертация)");
	мСообщенияОбОшибках.Установить(54,"Ошибка в глобальном обработчике события ПослеЗагрузкиОбъекта (конвертация)");
	мСообщенияОбОшибках.Установить(55,"Ошибка в обработчике события ПередВыгрузкой (свойства)");
	мСообщенияОбОшибках.Установить(56,"Ошибка в обработчике события ПриВыгрузке (свойства)");
	мСообщенияОбОшибках.Установить(57,"Ошибка в обработчике события ПослеВыгрузки (свойства)");
	
	мСообщенияОбОшибках.Установить(62,"Ошибка в обработчике события ПередВыгрузкойДанных (конвертация)");
	мСообщенияОбОшибках.Установить(63,"Ошибка в обработчике события ПослеВыгрузкиДанных (конвертация)");
	мСообщенияОбОшибках.Установить(64,"Ошибка в глобальном обработчике события ПередКонвертациейОбъекта (конвертация)");
	мСообщенияОбОшибках.Установить(65,"Ошибка в глобальном обработчике события ПередВыгрузкойОбъекта (конвертация)");
	мСообщенияОбОшибках.Установить(66,"Ошибка получения коллекции подчиненных объектов из входящих данных");
	мСообщенияОбОшибках.Установить(67,"Ошибка получения свойства подчиненного объекта из входящих данных");
	мСообщенияОбОшибках.Установить(68,"Ошибка получения свойства объекта из входящих данных");
	
	мСообщенияОбОшибках.Установить(69,"Ошибка в глобальном обработчике события ПослеВыгрузкиОбъекта (конвертация)");
	
	мСообщенияОбОшибках.Установить(71,"Не найдено соответствие для значения Источника");
	
	мСообщенияОбОшибках.Установить(72,"Ошибка при выгрузке данных для узла плана обмена");
	
	мСообщенияОбОшибках.Установить(73,"Ошибка в обработчике события ПоследовательностьПолейПоиска");
	мСообщенияОбОшибках.Установить(74,"Необходимо перезагрузить правила обмена для выгрузки данных.");
	
	мСообщенияОбОшибках.Установить(75,"Ошибка в обработчике события ПослеЗагрузкиПравилОбмена (конвертация)");
	мСообщенияОбОшибках.Установить(76,"Ошибка в обработчике события ПередОтправкойИнформацииОбУдалении (конвертация)");
	мСообщенияОбОшибках.Установить(77,"Ошибка в обработчике события ПриПолученииИнформацииОбУдалении (конвертация)");
	
	мСообщенияОбОшибках.Установить(78,"Ошибка при выполнении алгоритма после загрузки значений параметров");
	
	мСообщенияОбОшибках.Установить(79,"Ошибка в обработчике события ПослеВыгрузкиОбъектаВФайл");
	
	мСообщенияОбОшибках.Установить(80,"Ошибка установки свойства предопределенного элемента.
		|Нельзя помечать на удаление предопределенный элемент. Пометка на удаление для объекта не установлена.");
	//
	мСообщенияОбОшибках.Установить(83,"Ошибка обращения к табличной части объекта. Табличная часть объекта не может быть изменена.");
	мСообщенияОбОшибках.Установить(84,"Коллизия дат запрета изменения.");
	
	мСообщенияОбОшибках.Установить(173,"Ошибка блокировки узла обмена. Возможно синхронизация данных уже выполняется");
	мСообщенияОбОшибках.Установить(174,"Сообщение обмена было принято ранее");
	мСообщенияОбОшибках.Установить(175,"Ошибка в обработчике события ПередПолучениемИзмененныхОбъектов (конвертация)");
	мСообщенияОбОшибках.Установить(176,"Ошибка в обработчике события ПослеПолученияИнформацииОбУзлахОбмена (конвертация)");
		
	мСообщенияОбОшибках.Установить(1000,"Ошибка при создании временного файла выгрузки данных");
		
КонецПроцедуры

Процедура ИнициализироватьМенеджерыИСообщения()
	
	// Если Менеджеры = Неопределено Тогда
	// 	ИнициализацияМенеджеров();
	// КонецЕсли; 

	Если мСообщенияОбОшибках.РазмерСписка() = 0 Тогда
		ИнициализацияСообщений();
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияПравилВыгрузки()
	
	мТаблицаПравилВыгрузки = СоздатьОбъект("ТаблицаЗначений");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Отключить");
	мТаблицаПравилВыгрузки.НоваяКолонка("ЭтоГруппа");
	мТаблицаПравилВыгрузки.НоваяКолонка("Родитель");
	мТаблицаПравилВыгрузки.НоваяКолонка("Уровень");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Код");
	мТаблицаПравилВыгрузки.НоваяКолонка("Наименование");
	мТаблицаПравилВыгрузки.НоваяКолонка("Порядок", "Число", 10, 0);
	
	мТаблицаПравилВыгрузки.НоваяКолонка("КодПравилаКонвертации");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("СпособОтбораДанных");
	мТаблицаПравилВыгрузки.НоваяКолонка("ОбъектВыборки");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("ПередОбработкойПравила", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПередВыгрузкойОбъекта", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПослеВыгрузкиОбъекта", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПослеОбработкиПравила", "Число", 1, 0); 
	
	мТаблицаПравилВыгрузки.НоваяКолонка("НомерГруппы", "Число", 5, 0);
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Отбор");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Комментарий");
	мТаблицаПравилВыгрузки.НоваяКолонка("Описание");
	
КонецПроцедуры // ИнициализацияПравилВыгрузки()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияПравилКонвертацииОбъектов()
	
	мТаблицаПравилКонвертацииОбъектов = СоздатьОбъект("ТаблицаЗначений");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Код");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Наименование");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Порядок", "Число", 10, 0);

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("СинхронизироватьПоИдентификатору", "Число", 1, 0);

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Источник");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Приемник");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПередВыгрузкой", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПриВыгрузке", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеВыгрузки", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеВыгрузкиВФайл", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПередЗагрузкой");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПриЗагрузке");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеЗагрузки");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("СвойстваПоиска");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Свойства");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Значения");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Выгруженные");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеЗамещать", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеЗапоминатьВыгруженные", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеВыгружатьОбъектыСвойствПоСсылкам", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ВсеОбъектыВыгружены", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПоследовательностьПолейПоиска");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ГенерироватьНовыйНомерИлиКодЕслиНеУказан", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеСоздаватьЕслиНеНайден", "Число", 1, 0);
	
КонецПроцедуры // ИнициализацияПравилКонвертацииОбъектов()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ИнициализацияПравилКонвертацииСвойств()
	
	ТаблицаПравилКонвертацииСвойств = СоздатьОбъект("ТаблицаЗначений");
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Код");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Наименование");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Порядок", "Число", 10, 0);

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ЭтоГруппа", "Число", 1, 0);
    ТаблицаПравилКонвертацииСвойств.НоваяКолонка("СвойстваГруппы");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Источник");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ВидИсточника");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ТипИсточника");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Приемник");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ВидПриемника");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ТипПриемника");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("КодПравилаКонвертации");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПолучитьИзВходящихДанных", "Число", 1, 0);
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("НеЗамещать", "Число", 1, 0);
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПередОбработкойВыгрузки", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПередВыгрузкой", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПриВыгрузке", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПослеВыгрузки", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПослеОбработкиВыгрузки", "Число", 1, 0);
	
	Возврат ТаблицаПравилКонвертацииСвойств;

КонецФункции // ИнициализацияПравилКонвертацииСвойств()    

//******************************************************************************
//
// Инициализирует колонки таблицы настройки параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыНастройкиПараметров()

	//ТаблицаНастройкиПараметров = СоздатьОбъект("ТаблицаЗначений");
	//ТаблицаНастройкиПараметров.НоваяКолонка("Имя"); 
	//ТаблицаНастройкиПараметров.НоваяКолонка("Наименование"); 
	//ТаблицаНастройкиПараметров.НоваяКолонка("Значение");  
	//
	//ТаблицаНастройкиПараметров.ВидимостьКолонки("Имя",0,);

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

Функция ПолучитьЗначениеУзлаИзXML()
	
	Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
	Значение = Узел.Значение;
	
	ПозицияПоиска = Найти(Значение, РазделительСтрок);
	
	Если (ПозицияПоиска > 0) Тогда
		Возврат Значение;
	Иначе
		
		Значение = СтрЗаменить(Значение, Симв(10),РазделительСтрок);
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПВД(Родитель, Уровень, НомерГруппы)
	
	мТаблицаПравилВыгрузки.НоваяСтрока();
	мТаблицаПравилВыгрузки.ТекущаяСтрока(мТаблицаПравилВыгрузки.КоличествоСтрок());
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс), ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)));
		
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "ЭтоГруппа", 0);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Уровень", Уровень);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Родитель", Родитель);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "НомерГруппы", НомерГруппы);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
		
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "ПередОбработкойПравила") ИЛИ (Имя = "ПередВыгрузкойОбъекта") ИЛИ (Имя = "ПослеВыгрузкиОбъекта") ИЛИ (Имя = "ПослеОбработкиПравила") Тогда
			
			Значение = 1;
			
		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") ИЛИ (Имя = "ИмяТипаПриемника") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
			
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), Имя, Значение);
			
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;         

КонецПроцедуры // ЗагрузитьПВД()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьГруппуПВД(Родитель, Уровень, НомерГруппы)
	
	НомерГруппы = НомерГруппы + 1;

	ТекущийРодитель = "";
	
	мТаблицаПравилВыгрузки.НоваяСтрока();
	мТаблицаПравилВыгрузки.ТекущаяСтрока(мТаблицаПравилВыгрузки.КоличествоСтрок());
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс), ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)));
		
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "ЭтоГруппа", 1);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Уровень", Уровень);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Родитель", Родитель);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "НомерГруппы", НомерГруппы);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПВД(ТекущийРодитель, Уровень + 1, НомерГруппы);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПВД(ТекущийРодитель, Уровень + 1, НомерГруппы);
		
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), Имя, Значение);
			
			Если Имя = "Код" Тогда
				
				ТекущийРодитель = Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	НомерГруппы = НомерГруппы + 1;

КонецПроцедуры // ЗагрузитьГруппуПВД()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаВыгрузкиДанных()
	
	мТаблицаПравилВыгрузки.УдалитьСтроки();
	
	НомерТекущейГруппы = 1;
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПВД("", 0, НомерТекущейГруппы);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПВД("", 0, НомерТекущейГруппы);
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.Сортировать("НомерГруппы, ЭтоГруппа -, Порядок");
	
КонецПроцедуры // ЗагрузитьПравилаВыгрузкиДанных()
                  
                        
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПКС(СвойстваГруппы = 0, ЭтоГруппа = 0)
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
		
		Если НаименованиеАтрибута = "Отключить" Тогда
		
			Если ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)) = 1 Тогда
				
				Возврат;
				
			КонецЕсли;
		
		ИначеЕсли НаименованиеАтрибута = "Поиск" Тогда
			
			Поиск = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));

		КонецЕсли;
		
	КонецЦикла;

	Если Поиск = 1 Тогда
		
		Если СвойстваГруппы = 0 Тогда
			
			Свойства = мТаблицаПравилКонвертацииОбъектов.СвойстваПоиска;
			
		Иначе
			
			Свойства = СвойстваГруппы;
			
		КонецЕсли;
		
	Иначе
		
		Если СвойстваГруппы = 0 Тогда
			
			Свойства = мТаблицаПравилКонвертацииОбъектов.Свойства;
		
		Иначе
			
			Свойства = СвойстваГруппы;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Свойства.НоваяСтрока();
	Свойства.ТекущаяСтрока(Свойства.КоличествоСтрок());
	
	Свойства.ЭтоГруппа = ЭтоГруппа;
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "ПередОбработкойВыгрузки") ИЛИ (Имя = "ПередВыгрузкой") ИЛИ (Имя = "ПриВыгрузке") ИЛИ (Имя = "ПослеВыгрузки") ИЛИ (Имя = "ПослеОбработкиВыгрузки") Тогда
			
			Значение = 1;
			
		ИначеЕсли Имя = "ПолучитьИзВходящихДанных" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗамещать" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "Источник" Тогда
			
			Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
				НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
				
				Если НаименованиеАтрибута = "Имя" Тогда
					
					Свойства.Источник = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Вид" Тогда
					
					Свойства.ВидИсточника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Тип" Тогда
					
					Свойства.ТипИсточника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
		
		ИначеЕсли Имя = "Приемник" Тогда
			
			Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
				НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
				
				Если НаименованиеАтрибута = "Имя" Тогда
					
					Свойства.Приемник = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Вид" Тогда
					
					Свойства.ВидПриемника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Тип" Тогда
					
					Свойства.ТипПриемника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
		
		ИначеЕсли Имя = "Свойство" Тогда
			
			Если ЭтоГруппа = 1 Тогда
				
				Если ПустоеЗначение(Свойства.СвойстваГруппы) = 1 Тогда
					
					Свойства.СвойстваГруппы = ИнициализацияПравилКонвертацииСвойств();
					
				КонецЕсли;
				
				ЗагрузитьПКС(Свойства.СвойстваГруппы);
				Свойства.СвойстваГруппы.Сортировать("Порядок");
				
				ТипТега = мЧтениеXML.Следующий();
				Продолжить;
			
			Иначе
				
				ЗагрузитьПКС();
				мТаблицаПравилКонвертацииОбъектов.Свойства.Сортировать("Порядок");
				
				ТипТега = мЧтениеXML.Следующий();
				Продолжить;
				
			КонецЕсли;
		
		ИначеЕсли Имя = "Группа" Тогда
			
			ЗагрузитьПКС(, 1);
			мТаблицаПравилКонвертацииОбъектов.СвойстваГруппы.Сортировать("Порядок");
			
		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить; 
			
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		Свойства.УстановитьЗначение(Свойства.ТекущаяСтрока(), Имя, Значение);
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКС()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииСвойств()
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Свойство", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПКС();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПКС(, 1);
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	мТаблицаПравилКонвертацииОбъектов.Свойства.Сортировать("Порядок");

КонецПроцедуры // ЗагрузитьПравилаКонвертацииСвойств()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииЗначений()
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Значение", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ТипТега = мЧтениеXML.Спуститься();
			
			Источник = "";
			Приемник = "";
			
			Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
			
				Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
				
					Если Имя = "Источник" Тогда
						
						Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
						Источник = Узел.Значение;
					
					ИначеЕсли Имя = "Приемник" Тогда
						
						Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
						Приемник = Узел.Значение;
					
					КонецЕсли;
				
				ТипТега = мЧтениеXML.Следующий();
				
			КонецЦикла;
				
			мТаблицаПравилКонвертацииОбъектов.Значения.Установить(СокрЛП(Источник), СокрЛП(Приемник));
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПравилаКонвертацииЗначений()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПКО(Знач Порядок = "")
	
	мТаблицаПравилКонвертацииОбъектов.НоваяСтрока();
	мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(мТаблицаПравилКонвертацииОбъектов.КоличествоСтрок());
	
	мТаблицаПравилКонвертацииОбъектов.Выгруженные = СоздатьОбъект("СписокЗначений");
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "Порядок") Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = Число(Узел.Значение);
			
			Порядок = СтрЗаменить(Порядок, ",", РазделительСтрок);
			
			Для Индекс = 1 ПО СтрКоличествоСтрок(Порядок) Цикл
			   
				Попытка
					
					мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), "Порядок" + Индекс, Число(СтрПолучитьСтроку(Порядок, Индекс)));
					
				Исключение
					
					мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Порядок" + Индекс, "Число", 10, 0);
					мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), "Порядок" + Индекс, Число(СтрПолучитьСтроку(Порядок, Индекс)));
					
				КонецПопытки;
				
			КонецЦикла;
		
		ИначеЕсли (Имя = "ПередВыгрузкой") ИЛИ (Имя = "ПриВыгрузке") ИЛИ (Имя = "ПослеВыгрузки") ИЛИ (Имя = "ПослеВыгрузкиВФайл") Тогда
			
			Значение = 1;
			
		ИначеЕсли Имя = "СинхронизироватьПоИдентификатору" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗамещать" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗапоминатьВыгруженные" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "ГенерироватьНовыйНомерИлиКодЕслиНеУказан" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "НеСоздаватьЕслиНеНайден" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "Свойства" Тогда
			
			мТаблицаПравилКонвертацииОбъектов.СвойстваПоиска = ИнициализацияПравилКонвертацииСвойств();
			мТаблицаПравилКонвертацииОбъектов.Свойства = ИнициализацияПравилКонвертацииСвойств();
			
			ЗагрузитьПравилаКонвертацииСвойств();

			Если Число(мТаблицаПравилКонвертацииОбъектов.ПолучитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), "СинхронизироватьПоИдентификатору")) = 1 Тогда
				
				Свойства = мТаблицаПравилКонвертацииОбъектов.СвойстваПоиска;
				Свойства.НоваяСтрока();
				Свойства.ТекущаяСтрока(Свойства.КоличествоСтрок());
				Свойства.Наименование	= "{УникальныйИдентификатор}";
				Свойства.Источник		= "{УникальныйИдентификатор}";
				Свойства.Приемник		= "{УникальныйИдентификатор}";

			КонецЕсли;
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

			
		ИначеЕсли Имя = "Значения" Тогда
			
			мТаблицаПравилКонвертацииОбъектов.Значения = СоздатьОбъект("СписокЗначений");
			ЗагрузитьПравилаКонвертацииЗначений();
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), Имя, Значение);
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьГруппуПКО(Знач Порядок = "")
	
	ПорядокГруппы = 0;
	
	// Группы ПКО в таблицу не добавляются
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Порядок", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			ПорядокГруппы = Число(Узел.Значение);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПКО(?(ПустаяСтрока(Порядок) = 1, Порядок, Порядок + ",") + Строка(ПорядокГруппы));
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПКО(?(ПустаяСтрока(Порядок) = 1, Порядок, Порядок + ",") + Строка(ПорядокГруппы));
		
		Иначе
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьГруппуПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииОбъектов()
	
	мТаблицаПравилКонвертацииОбъектов.УдалитьСтроки();
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПКО();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПКО();
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	Индекс = 1;
	СтрокаСортировки = "";
	
	Пока (1 = 1) Цикл
		
		Попытка
	    	
			мТаблицаПравилКонвертацииОбъектов.ТекущаяКолонка("Порядок" + Индекс);
			СтрокаСортировки = СтрокаСортировки + "Порядок" + Индекс + ",";
			
		Исключение
			
			СтрокаСортировки = СтрокаСортировки + "Порядок";
			Прервать;
			
		КонецПопытки;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	мТаблицаПравилКонвертацииОбъектов.Сортировать(СтрокаСортировки);
	
КонецПроцедуры // ЗагрузитьПравилаКонвертацииОбъектов()
                         
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПараметры()      
            
	Параметры = СоздатьОбъект("ТаблицаЗначений");
	
	Если мВерсияФормата = "2.01" Тогда   
		ТипТега = мЧтениеXML.Спуститься();
		
		Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
		
			Если ПроверитьИмяТипУзла(мЧтениеXML, "Параметр", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
	
				ИмяПараметра            = ""; 
				НаименованиеПараметра   = "";
				УстанавливатьВДиалоге   = 1; 
				ТипЗначенияПараметра    = "Строка";  
				ИспользуетсяПриЗагрузке = 0;
			
				Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
					НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
					Если НаименованиеАтрибута = "Имя" Тогда
						ИмяПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "Наименование" Тогда	                         
						НаименованиеПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "УстанавливатьВДиалоге" Тогда	                         
						УстанавливатьВДиалоге = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));
					ИначеЕсли НаименованиеАтрибута = "ТипЗначения" Тогда	                         
						ТипЗначенияПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "ИспользуетсяПриЗагрузке" Тогда
						ИспользуетсяПриЗагрузке = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));
						
					КонецЕсли;
			
				КонецЦикла;
				
				Если ПустаяСтрока(ИмяПараметра) = 0 Тогда
					//Параметры.НоваяКолонка(СокрЛП(ИмяПараметра)); 
					Параметры.ВставитьКолонку(СокрЛП(ИмяПараметра));
					Если УстанавливатьВДиалоге = 1 Тогда
						ТаблицаНастройкиПараметров.НоваяСтрока();
						ТаблицаНастройкиПараметров.Имя          = СокрЛП(ИмяПараметра);
						ТаблицаНастройкиПараметров.Наименование = НаименованиеПараметра;
						Если Найти("Строка, Число, Дата",ТипЗначенияПараметра) > 0 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = ТипЗначенияПараметра;
							ТаблицаНастройкиПараметров.ВидЗначения = ТипЗначенияПараметра;
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение(ТипЗначенияПараметра);
						ИначеЕсли Найти(ТипЗначенияПараметра,"ПеречислениеСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Перечисление";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("ПеречислениеСсылка.")+1);
							ПеречислениеДляПараметра = Перечисление.ПолучитьАтрибут(ТаблицаНастройкиПараметров.ВидЗначения);
							ТаблицаНастройкиПараметров.Значение    = ПеречислениеДляПараметра.ЗначениеПоНомеру(1);
						ИначеЕсли Найти(ТипЗначенияПараметра,"СправочникСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Справочник";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("СправочникСсылка.")+1);
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение("Справочник."+ТаблицаНастройкиПараметров.ВидЗначения);
						ИначеЕсли Найти(ТипЗначенияПараметра,"ДокументСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Документ";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("ДокументСсылка.")+1);
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение("Документ."+ТаблицаНастройкиПараметров.ВидЗначения);
							
						КонецЕсли;    
						
					КонецЕсли;                   
					
					Если ИспользуетсяПриЗагрузке = 1 Тогда
						ТаблицаПараметровДляЗагрузки.НоваяСтрока();    
						ТаблицаПараметровДляЗагрузки.Имя          = ИмяПараметра; 
						ТаблицаПараметровДляЗагрузки.Наименование = НаименованиеПараметра;
					КонецЕсли;
					
					
				КонецЕсли;
			
			КонецЕсли;
			
			ТипТега = мЧтениеXML.Следующий();
		
		КонецЦикла;
		
	Иначе
		Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта(); 
		СтрокаПараметров = СтрЗаменить(Узел.Значение, ",", РазделительСтрок);
		
		Для Индекс = 1 По СтрКоличествоСтрок(СтрокаПараметров) Цикл
			Параметры.НоваяКолонка(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, Индекс))); 
		КонецЦикла;    
	    
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузитьПараметры()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ЗагрузитьПравила(ВхИмяФайлаПравил)
	
	Если ПустаяСтрока(ВхИмяФайлаПравил) = 1 Тогда
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение("Не указано имя файла правил!");
		Иначе
			Сообщить("Не указано имя файла правил!");
		КонецЕсли;
		Возврат 0;
		
	КонецЕсли;

	Состояние("Идет загрузка правил обмена...");
	
	// ПравилаВыгрузкиСписок.УдалитьВсе();

	мXMLАнализатор = СоздатьОбъект("AddIn.XMLParser");
	мЧтениеXML = мXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();

	мЧтениеXML.СвязатьСФайлом(ВхИмяФайлаПравил);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Если ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаОбмена", ТипТега, мНачалоНовогоЭлемента) = 0 Тогда
		
		ВывестиСообщение("Файл не содержит корневого узла <ПравилаОбмена>!", "!!!");
		Возврат 0;
		
	КонецЕсли;
	
	мИд = "";
	мНаименование = "";
	мДатаВремяСоздания = "";
	мКонфигурацияИсточник = "";
	мКонфигурацияПриемник = "";
	мВерсияФормата = "";
	
	мКонвертацияПередВыгрузкойДанных      = 0;
	мКонвертацияПередВыгрузкойОбъекта     = 0;
	мКонвертацияПередОтправкойИнформацииОбУдалении = 0;
	мКонвертацияПередКонвертациейОбъекта  = 0;
	мКонвертацияПослеВыгрузкиОбъекта      = 0;
	мКонвертацияПослеВыгрузкиДанных       = 0;
	мКонвертацияПослеЗагрузкиПравилОбмена = 0;
	
	// Очищаем настройки параметров
	ТаблицаНастройкиПараметров.УдалитьСтроки(); 
	ТаблицаПараметровДляЗагрузки.УдалитьСтроки(); 
	
	// Очищаем отборы
	// ТаблицаНастройкиОтбора.УдалитьСтроки();
	// ИмяПВДДляНастройкиОтбора = "";
	// ОбъектДляНастройкиОтбора = "";
	// КодПВДДляНастройкиОтбора = "";
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецДокумента) = 0 Цикл
		
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Ид", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мИд = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ВерсияФормата", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мВерсияФормата = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Наименование", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мНаименование = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ДатаВремяСоздания", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мДатаВремяСоздания = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Источник", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонфигурацияИсточник = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Приемник", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			мКонфигурацияПриемник = Узел.Значение;
			ВерсияПлатформыПриемника = Узел.ПолучитьАтрибут("ВерсияПлатформы");
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередВыгрузкойДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередВыгрузкойДанных = 1;
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередВыгрузкойОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередВыгрузкойОбъекта = 1;

		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередОтправкойИнформацииОбУдалении", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередОтправкойИнформацииОбУдалении = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередКонвертациейОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПередКонвертациейОбъекта = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеВыгрузкиОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПослеВыгрузкиОбъекта = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеВыгрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПослеВыгрузкиДанных = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиПравилОбмена", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиПравилОбмена = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередЗагрузкойДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередЗагрузкойДанных = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередЗагрузкойОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередЗагрузкойОбъекта = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиОбъекта = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиДанных = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаКонвертацииОбъектов", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда

			ЗагрузитьПравилаКонвертацииОбъектов();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаВыгрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда

			ЗагрузитьПравилаВыгрузкиДанных();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Параметры", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			                                              
			ЗагрузитьПараметры();
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
		
	КонецЦикла;
	
	Состояние("Загрузка правил обмена завершена.");
	
	// Глобальный обработчик "ПослеЗагрузкиПравилОбмена"
	Если мКонвертацияПослеЗагрузкиПравилОбмена = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПослеЗагрузкиПравилОбмена()]");
		
		Если Число(Отказ) = 1 Тогда
			
			ВывестиСообщение("Ошибка в обработчике ПослеЗагрузкиПравилОбмена!", "!!!");
			Возврат 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// мТаблицаПравилВыгрузки.ВыбратьСтроки();
	
	// Пока мТаблицаПравилВыгрузки.ПолучитьСтроку() > 0 Цикл
		
	// 	Префикс = "";
		
	// 	Если мТаблицаПравилВыгрузки.ЭтоГруппа = 1 Тогда
			
	// 		Наименование = "[ " + СокрЛП(мТаблицаПравилВыгрузки.Наименование) + " ]";
		
	// 	Иначе
			
	// 		Наименование = "-" + СокрЛП(мТаблицаПравилВыгрузки.Наименование);
			
	// 	КонецЕсли;
		
	// 	Для Индекс = 0 По мТаблицаПравилВыгрузки.Уровень - 1 Цикл
			
	// 		Префикс = Префикс + "   ";
			
	// 	КонецЦикла;
		
	// 	Наименование = Префикс + Наименование;
		
	// 	ПравилаВыгрузкиСписок.ДобавитьЗначение(мТаблицаПравилВыгрузки.Код, Наименование);
		
	// 	// Если в обработку был передан список кодов правил выгрузки, будем выгружать
	// 	// именно их, а не те, которые установлены в правилах выгрузки по умолчанию
	// 	Если ПустоеЗначение(мИспользуемыеПравилаВыгрузки) = 0 Тогда
	// 		Если Найти(мИспользуемыеПравилаВыгрузки, мТаблицаПравилВыгрузки.Код) = 0 Тогда
	// 			Пометка = 0;
	// 		Иначе
	// 			Пометка = ?(мТаблицаПравилВыгрузки.Отключить = 1, 0, 1);
	// 		КонецЕсли;
	// 	Иначе
	// 		Пометка = ?(мТаблицаПравилВыгрузки.Отключить = 1, 0, 1);
	// 	КонецЕсли;
		
	// 	ПравилаВыгрузкиСписок.Пометка(ПравилаВыгрузкиСписок.РазмерСписка(), Пометка);
		
	// КонецЦикла;

	мЧтениеXML = 0;
	мXMLАнализатор = 0;

	Возврат 1;
	
КонецФункции // ЗагрузитьПравила()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция НайтиПравило(Объект, ИмяПравила = "")
	
	Перем НомерСтроки;
	
	Если ПустаяСтрока(СокрЛП(ИмяПравила)) = 0 Тогда
		
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(СокрЛП(ИмяПравила), НомерСтроки, "Код");
		
	ИначеЕсли ТипЗначения(Объект) < 4 Тогда
	
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(ТипЗначенияСтр(Объект), НомерСтроки, "Код");
		
	ИначеЕсли ТипЗначения(Объект) < 100 Тогда
	
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(ТипЗначенияСтр(Объект) + "Ссылка." + Объект.Вид(), НомерСтроки, "Источник");
		
	Иначе
	
		НомерСтроки = 0;
		
	КонецЕсли;
	
	Возврат НомерСтроки; 

КонецФункции // НайтиПравило()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьРеквизитПКО(НомерПКО, Реквизит)
	
	Возврат мТаблицаПравилКонвертацииОбъектов.ПолучитьЗначение(НомерПКО, Реквизит);
	
КонецФункции // ПолучитьРеквизитПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, Реквизит)
	
	Возврат КоллекцияПКС.ПолучитьЗначение(НомерПКС, Реквизит);
	
КонецФункции // ПолучитьРеквизитПКС()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОСТУПА К ДАННЫМ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьЗначение(Объект, Имя, ВхДата = 0)
	
	Значение = мПустоеЗначение;
	
	Если ТипЗначенияСтр(Объект) = "СписокЗначений" Тогда
		
		Значение = Объект.Получить(Имя);
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "ТаблицаЗначений" Тогда
	
		Значение = Объект.ПолучитьЗначение(Объект.НомерСтроки, Имя);
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "Справочник" Тогда
		
		Если Имя = "ПометкаУдаления" Тогда
			
			Значение = Объект.ПометкаУдаления();
		
		ИначеЕсли Имя = "Код" Тогда
			
			Значение = Объект.Код;
		
		ИначеЕсли Имя = "Наименование" Тогда
			
			Значение = Объект.Наименование;
		
		ИначеЕсли Имя = "ЭтоГруппа" Тогда
			
			Значение = Объект.ЭтоГруппа();
		
		ИначеЕсли Имя = "Родитель" Тогда
			
			Значение = Объект.Родитель;
			
		Иначе
	
			Попытка
			
        		Значение = Объект.ПолучитьАтрибут(Имя);
			
			Исключение
				
				ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
				ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
				
			КонецПопытки;
			
			Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
				
				Значение = мПустоеЗначение;
			    
			КонецЕсли;
			
		КонецЕсли;
		 
	ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
		
		Если Имя = "ПометкаУдаления" Тогда
			
			Значение = Объект.ПометкаУдаления();
		
		ИначеЕсли Имя = "НомерДок" Тогда
			
			Значение = Объект.НомерДок;
			
		ИначеЕсли Имя = "ДатаДок" Тогда
			
			Значение = ПолучитьДатуV8(Объект.ДатаДок, Объект.ПолучитьВремя());
		
		ИначеЕсли Имя = "Проведен" Тогда
			
			Значение = Объект.Проведен();
		
		ИначеЕсли Имя = "ТабличнаяЧасть" Тогда
			
			Объект.ВыгрузитьТабличнуюЧасть(Значение);
			
		Иначе
         
			Значение = Объект.ПолучитьАтрибут(Имя);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "НеизвестныйОбъект" Тогда // Например, константы
		
		Попытка
		
			Значение = Объект.ПолучитьАтрибут(Имя);
		
		Исключение
			
			ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
			ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
			
		КонецПопытки;
		
		// Возможно это периодическая константа
		Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
			
			Попытка
				
				Если ПустоеЗначение(ВхДата) = 1 Тогда
					ВхДата = ТекущаяДата();
				КонецЕсли;

				//Значение = Объект.ПолучитьАтрибут(Имя).Получить(ДатаОкончания);
				Значение = Объект.ПолучитьАтрибут(Имя).Получить(ВхДата);
			
			Исключение
				
				ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
				ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
				
			КонецПопытки;
		
		КонецЕсли;
		
		// Тогда уж точно что-то еще нам неизвестное...
		Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
			
			Значение = мПустоеЗначение;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначение()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ВЫГРУЗКИ ПО ПРАВИЛАМ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьГруппуСвойств(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, 
	НомерПКГС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку = 0)

	
	КоллекцияОбъектов = мПустоеЗначение;
	НеЗамещать        = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "НеЗамещать");
	НеОчищать         = 0;

	
	// Обработчик "ПередОбработкойВыгрузки"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПередОбработкойВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
		
		Отказ = Шаблон("[ПКГС_ПередОбработкойВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, НеЗамещать, НеОчищать)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	ВидИсточника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидИсточника");
    ВидПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника");
	
    // Создание узла коллекции подчиненных объектов
	Если ВидПриемника = "ТабличнаяЧасть" Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел(document, "ТабличнаяЧасть");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если НеОчищать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать", "true");
			
		КонецЕсли;
	
	ИначеЕсли Найти(ВидПриемника, "НаборДвижений") > 0 Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел(document, "НаборЗаписей");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если НеОчищать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать", "true");
			
		КонецЕсли;
		
	Иначе  // это простая группировка
		
		ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "СвойстваГруппы"), 
			УзелКоллекцииСвойств,, СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")), , ВыгрузитьТолькоСсылку);
		
		// Обработчик "ПослеОбработкиВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеОбработкиВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПослеОбработкиВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, УзелКоллекцииОбъектов)]");
	
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	
	// Получение коллекции подчиненных объектов
	
	Если КоллекцияОбъектов <> мПустоеЗначение Тогда
		
		// Инициализировали коллекцию в обработчике ПередОбработкой
		
	ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПолучитьИзВходящихДанных") = 1 Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
	ИначеЕсли ВидИсточника = "ТабличнаяЧасть" Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Источник"));
		
	ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Источник")) = 1 Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
	КонецЕсли;

	Попытка
		
		КоллекцияОбъектов.ВыбратьСтроки();
		
	Исключение
		
		ВывестиСообщение("Ошибка выбора объектов коллекции", "!!!");
		
		Возврат;
		
	КонецПопытки;
	
	Пока КоллекцияОбъектов.ПолучитьСтроку() > 0 Цикл
		
		Индекс = 1 + Индекс;
		КоллекцияОбъектов.ТекущаяСтрока(Индекс);
		
		// Обработчик "ПередВыгрузкой"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПередВыгрузкой") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		УзелОбъектаКоллекции = СоздатьУзел(document, "Запись");
		СтандартнаяОбработка = 1;
		
		// Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов, УзелОбъектаКоллекции, СтандартнаяОбработка)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;

		// Выгрузка свойств объекта коллекции
		
		Если СтандартнаяОбработка = 1 Тогда
			
			СвойстваГруппы = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "СвойстваГруппы");
			
			Если СвойстваГруппы.КоличествоСтрок() > 0 Тогда
				
				ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, СвойстваГруппы, УзелОбъектаКоллекции, 
					КоллекцияОбъектов, СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")), , ВыгрузитьТолькоСсылку);
				
			Иначе
				
				//	ПО ПРАВИЛУ
				
			КонецЕсли;
			
		КонецЕсли;

		
		// Обработчик "ПослеВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов, УзелОбъектаКоллекции)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииОбъектов, УзелОбъектаКоллекции);
		
	КонецЦикла;

	
    // Обработчик "ПослеОбработкиВыгрузки"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеОбработкиВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
		
		Отказ = Шаблон("[ПКГС_ПослеОбработкиВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, УзелКоллекцииОбъектов)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелКоллекцииОбъектов);

КонецПроцедуры // ВыгрузитьГруппуСвойств()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьСубконто(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, 
	НомерПКС, УзелКоллекцииСвойств = 0, ОбъектКоллекции = 0, ПравилоРодитель = "", Знач ВыгрузитьТолькоСсылку = 0)
	
	// Инициализация значения
	Значение = мПустоеЗначение;
	ИмяПКО = "";
	ИмяПКОВидСубконто = "";
	НеЗамещать   = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "НеЗамещать");
	
	Пусто		 = 0;
	Выражение	 = мПустоеЗначение;
	ТипПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ТипПриемника");
	
	// Обработчик "ПередВыгрузкой"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПередВыгрузкой") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
		
		Отказ = Шаблон("[ПКС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
	
	Если Значение = мПустоеЗначение Тогда
		
		Если ОбъектКоллекции <> мПустоеЗначение Тогда
			
			Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
				
				Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
				
			ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
				
				Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
				
			Иначе

				Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
			
			Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
		ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
			
			Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
			
		Иначе
			
			Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗначенияСтр(Значение) <> "ТаблицаЗначений" Тогда
		
		ВывестиСообщение("Коллекция субконто не является таблицей значений", "!!!");
		Возврат;
	    
	КонецЕсли;
	
	Значение.ВыбратьСтроки();
	
	Пока Значение.ПолучитьСтроку() > 0 Цикл
		
		ВидСубконто = Значение.Ключ;
		Субконто = Значение.Значение;
		
		//Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ВидСубконто, Субконто, Пусто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если ПустоеЗначение(Субконто) = 0 Тогда
			
			УзелСубконто = СоздатьУзел(document, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
			
			// Ключ
			УзелСвойства = СоздатьУзел(document, "Свойство");
			
		
			НомерПКОКлюч = НайтиПравило(, ИмяПКОВидСубконто);
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Ключ");
			УстановитьАтрибут(УзелСвойства, "Тип", ПолучитьРеквизитПКО(НомерПКОКлюч, "Приемник"));
						
			УзелСсылки = ВыгрузитьПоПравилу(document, ВидСубконто,, ИсходящиеДанные,, ИмяПКОВидСубконто,,ВыгрузитьТолькоСсылку, НомерПКОКлюч);
			
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(document, УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(document, УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				//ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				КлонироватьПодчиненным(УзелСвойства, УзелСсылки);
				
			КонецЕсли;
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
			// Значение
			УзелСвойства = СоздатьУзел(document, "Свойство");
			
			ТипЗначенияСубконто = ТипЗначенияСтр(Субконто);
			
			Если (ИмяПКО = "") И ((ТипЗначенияСубконто = "Строка") ИЛИ (ТипЗначенияСубконто = "Число") ИЛИ (ТипЗначенияСубконто = "Булево") ИЛИ (ТипЗначенияСубконто = "Дата")) Тогда
				
				НомерПКОЗначение = 0;
				ТипПриемника = ТипЗначенияСубконто;
				
			Иначе
			
				НомерПКОЗначение = НайтиПравило(Субконто, ИмяПКО);
				ТипПриемника = ПолучитьРеквизитПКО(НомерПКОЗначение, "Приемник");
				
			КонецЕсли;				
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
			УзелСсылки = ВыгрузитьПоПравилу(document, Субконто,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОЗначение);
			
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(document, УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(document, УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				// ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				КлонироватьПодчиненным(УзелСвойства, УзелСсылки);
				
			КонецЕсли;
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
			// Обработчик "ПослеВыгрузки"
			Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПослеВыгрузки") = 1 Тогда
				
				КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
				
				Отказ = Шаблон("[ПКС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ВидСубконто, Субконто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства, УзелСсылки)]");
		
			КонецЕсли;
				
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСубконто);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьСубконто()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, УзелКоллекцииСвойств = 0, 
	ОбъектКоллекции = 0, ПравилоРодитель = "", ИмяПредопределенногоЭлемента = "", Знач ВыгрузитьТолькоСсылку = 0)
	
	Если УзелКоллекцииСвойств = 0 Тогда
		
		УзелКоллекцииСвойств = Приемник;
		
	КонецЕсли; 							
	
	// Выгружаем имя предопределенного если оно указано
	Если ПустаяСтрока(ИмяПредопределенногоЭлемента) = 0 Тогда
		УзелСвойства = СоздатьУзел(document, "Свойство");
		УстановитьАтрибут(УзелСвойства, "Имя", "{ИмяПредопределенногоЭлемента}");
		УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
		ЗаписатьЭлемент(document, УзелСвойства, "Значение", ИмяПредопределенногоЭлемента);
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
	КонецЕсли;
	
	Если ПустоеЗначение(КоллекцияПКС) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерПКС = 1 По КоллекцияПКС.КоличествоСтрок() Цикл
		
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника") = "ВидыСубконтоСчета" Тогда
			
			ВыгрузитьСубконто(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, НомерПКС, 
				УзелКоллекцииСвойств, ОбъектКоллекции, ПравилоРодитель, ВыгрузитьТолькоСсылку);
			
			Продолжить;

		ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Наименование") = "{УникальныйИдентификатор}" Тогда
			
			// СсылкаНаИсточник = ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект);
			
			УникальныйИдентификатор = ПолучитьУникальныйИдентификатор(Источник);
			
			УзелСвойства = СоздатьУзел(document, "Свойство");
			УстановитьАтрибут(УзелСвойства, "Имя", "{УникальныйИдентификатор}");
			УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
			УстановитьАтрибут(УзелСвойства, "ТипИсточника", ПолучитьРеквизитПКО(НомерПКО, "Источник"));
			УстановитьАтрибут(УзелСвойства, "ТипПриемника", ПолучитьРеквизитПКО(НомерПКО, "Приемник"));
			ЗаписатьЭлемент(document, УзелСвойства, "Значение", УникальныйИдентификатор);
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ЭтоГруппа") = 1 Тогда
			
			ВыгрузитьГруппуСвойств(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, НомерПКС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку);
			Продолжить;
			
		КонецЕсли;

		//Инициализация конвертируемого значения
        Значение 	      = мПустоеЗначение;
		ИмяПКО		      = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "КодПравилаКонвертации");
		ИмяПКОВидСубконто = "";
		НеЗамещать        = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "НеЗамещать");
		
		Пусто		 = 0;
		Выражение	 = мПустоеЗначение;
		ТипПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ТипПриемника");

		// Обработчик "ПередВыгрузкой"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПередВыгрузкой") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
        // Создаем узел свойства
		УзелСвойства = СоздатьУзел(document, "Свойство");
		УстановитьАтрибут(УзелСвойства, "Имя", ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелСвойства, "НеЗамещать", "true");
			
		КонецЕсли;
		
		// Возможно правило конвертации уже определено
		НомерПКОСвойств = мПустоеЗначение;
		
		Если ПустаяСтрока(ИмяПКО) = 0 Тогда
			
			НомерПКОСвойств = НайтиПравило(, ИмяПКО);
			
		КонецЕсли;
		
		// Попытка определить тип свойства приемника
		Если ПустаяСтрока(ТипПриемника) = 0 Тогда
			
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
		ИначеЕсли НомерПКОСвойств <> мПустоеЗначение Тогда
			
			ТипПриемника = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
		КонецЕсли;

		// Определяем конвертируемое значение
		Если Выражение <> мПустоеЗначение Тогда
			
			ЗаписатьЭлемент(document, УзелСвойства, "Выражение", Выражение);
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		ИначеЕсли Пусто = 1 Тогда
			
			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаписатьЭлемент(document, УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		ИначеЕсли Значение = мПустоеЗначение Тогда
			
			Если ОбъектКоллекции <> 0 Тогда
				
				Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
					
					Попытка
						
						Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из входящих данных", "!!!");
						
					КонецПопытки;
					
				ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
					
					Попытка
						
						Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из объекта коллекции. Свойство: "+ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"), "!!!");
						
					КонецПопытки;
						
				Иначе

					Попытка
						
						Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из объекта коллекции. Свойство: "+ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"), "!!!");
						
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
				
				Попытка
					
					Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
				Исключение
					
				КонецПопытки;
				
			ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
				
				Попытка
					
					Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
					
				Исключение
					
				КонецПопытки;
				
			Иначе // получаем конвертируемое значение по имени свойства приемника
				
				Попытка
					
					Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
				
		КонецЕсли;

		Пусто = ПустоеЗначение(Значение);
		
		//Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, """", """", Пусто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Пусто = ПустоеЗначение(Значение);
		
		Если Пусто = 1 Тогда
			
			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаписатьЭлемент(document, УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		КонецЕсли;
		
		УзелСсылки = мПустоеЗначение;
		
		Если (НомерПКОСвойств <> мПустоеЗначение) ИЛИ (ПустаяСтрока(ИмяПКО) = 0) Тогда
			
			УзелСсылки    = ВыгрузитьПоПравилу(document, Значение,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОСвойств);
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);

			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				ТипПриемника = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
				УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
			КонецЕсли;
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(document, УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(document, УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				//ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				КлонироватьПодчиненным(УзелСвойства, УзелСсылки);
				
			КонецЕсли;
			
		Иначе
			
			ТипЗнач = ТипЗначенияСтр(Значение);
			
			Если ТипЗнач = "Строка" Тогда
				
				Если ТипПриемника = "Строка"  Тогда
				ИначеЕсли ТипПриемника = "Число"  Тогда
					
					Значение = Число(Значение);
					
				ИначеЕсли ТипПриемника = "Булево"  Тогда
					
					Значение = Значение;
					
				ИначеЕсли ТипПриемника = "Дата"  Тогда
					
					Значение = Значение;
					
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
					
				Иначе
					
				КонецЕсли;
				
				ЗаписатьЭлемент(document, УзелСвойства, "Значение", Значение);
				
			ИначеЕсли ТипЗнач = "Число" Тогда
				
				Если ТипПриемника = "Число"  Тогда
				ИначеЕсли ТипПриемника = "Булево"  Тогда
					
					Значение = ПривестиЗначениеКБулево(Значение);
					
				ИначеЕсли ТипПриемника = "Строка"  Тогда
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Число");
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				ЗаписатьЭлемент(document, УзелСвойства, "Значение", Значение);
				
			ИначеЕсли ТипЗнач = "Дата" Тогда
				
				Если ТипПриемника = "Дата"  Тогда
					
					Значение = ПолучитьДатуV8(Значение);
					
				ИначеЕсли ТипПриемника = "Строка"  Тогда
					
					Значение = Строка(Значение);
					
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Дата");
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				ЗаписатьЭлемент(document, УзелСвойства, "Значение", Значение);
				
			Иначе
				
				НомерПКОСвойств = НайтиПравило(Значение, "");
				
				Если НомерПКОСвойств > 0 Тогда
					
					ИмяПКО = ПолучитьРеквизитПКО(НомерПКОСвойств, "Код");
					
					Если ПустаяСтрока(ТипПриемника) = 1 Тогда
						
						ТипПриемника  = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
						УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
						
					КонецЕсли;
					
					УзелСсылки    = ВыгрузитьПоПравилу(document, Значение,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОСвойств);
					ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
					
					Если УзелСсылки = мПустоеЗначение Тогда
						
						Продолжить;
						
					ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
						
						Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
							
							ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
							
						Иначе
							
							ЗаписатьЭлемент(document, УзелСвойства, "Значение", УзелСсылки);
							
						КонецЕсли;
						
					ИначеЕсли ТипУзлаСсылки = "Число" Тогда
						
						ЗаписатьЭлемент(document, УзелСвойства, "Нпп", УзелСсылки);
						
					Иначе
						
						// ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
						КлонироватьПодчиненным(УзелСвойства, УзелСсылки);
						
					КонецЕсли;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		// Обработчик "ПослеВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПослеВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, """", """", ИмяПКО, ИмяПКОВидСубконто, УзелСвойства, УзелСсылки)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
		
	КонецЦикла;		//	по ПКС

КонецПроцедуры // ВыгрузитьСвойства()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ВыгрузитьПоПравилу(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО = "", УзелСсылки = "", ТолькоПолучитьУзелСсылки = 0, 
	НомерПКО = 0)

	rootNode = document.ЭлементДокумента;
	// Поиск ПКО
	Если НомерПКО = 0 Тогда
		
		НомерПКО = НайтиПравило(Источник, ИмяПКО);
		

		
	ИначеЕсли ПустаяСтрока(ИмяПКО) = 0 Тогда
		
		НомерПКО = НайтиПравило(Источник, ИмяПКО);
		
		// Если НомерПКО = 0 Тогда
			
		// 	ВывестиСообщение("Не найдено правило конвертации объекта: " + ИмяПКО, "!!!");
		// 	Возврат мПустоеЗначение;
			
		// КонецЕсли;
			
	КонецЕсли;

	Если НомерПКО = 0 Тогда

		ЗП = ЗаписьПротоколаОбмена(45);
		
		ЗП.Объект = Источник;
		ЗП.ТипОбъекта = ПолучитьОписаниеТипа(Источник);
		
		ЗаписатьВПротоколВыполнения(45, ЗП, 1); // не найдено ПКО
			
		
		//ВывестиСообщение("Не найдено правило конвертации объекта: " + Строка(Источник), "!!!");
		Возврат мПустоеЗначение;
		
	КонецЕсли;
	
	Если мКомментироватьВыгрузкуОбъектов	= 1 Тогда
		
		Попытка
			ИсточникВСтроку = Строка(Источник);
		Исключение
			ИсточникВСтроку = " ";
		КонецПопытки;
		
		ИмяДействия = ?(ТолькоПолучитьУзелСсылки = 1, "Конвертация ссылки на объект", "Конвертация объекта");
		
		ТекстСообщения = "[ИмяДействия]: [Объект]([ТипОбъекта]), ПКО: [ПКО]([НаименованиеПКО])";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяДействия]", ИмяДействия);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Объект]", ИсточникВСтроку);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТипОбъекта]", ПолучитьОписаниеТипа(Источник));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ПКО]", СокрЛП(ИмяПКО));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НаименованиеПКО]", ПолучитьРеквизитПКО(НомерПКО, "Наименование"));
		
		ЗаписатьВПротоколВыполнения(ТекстСообщения, , 0, ТекущийУровеньВложенностиВыгрузитьПоПравилу + 1, 7);

		//ВывестиСообщение("Конвертация объекта или получение ссылки:  " + Строка(Источник) + "  (" + ТипЗначенияСтр(Источник) + ")");
		
	КонецЕсли;

	НеЗапоминатьВыгруженные     = ПолучитьРеквизитПКО(НомерПКО, "НеЗапоминатьВыгруженные");
	НеВыгружатьОбъектыСвойствПоСсылкам = ПолучитьРеквизитПКО(НомерПКО, "НеВыгружатьОбъектыСвойствПоСсылкам");
	ВыгруженныеОбъекты          = ПолучитьРеквизитПКО(НомерПКО, "Выгруженные");
	ВсеОбъектыВыгружены         = ПолучитьРеквизитПКО(НомерПКО, "ВсеОбъектыВыгружены");
	НеЗамещатьОбъектПриЗагрузке = ПолучитьРеквизитПКО(НомерПКО, "НеЗамещать");
	НеСоздаватьЕслиНеНайден     = ПолучитьРеквизитПКО(НомерПКО, "НеСоздаватьЕслиНеНайден");
	
	РежимЗаписи     			= "";
	РежимПроведения 			= "";
	
	// Ключ выгружаемых данных
	Если (ПустоеЗначение(Источник) = 0) И (НеЗапоминатьВыгруженные = 0) Тогда
		
		КлючВыгружаемыхДанных = ЗначениеВСтрокуВнутр(Источник);
		
	Иначе
		
		КлючВыгружаемыхДанных = НомерПКО;
		НеЗапоминатьВыгруженные = 1;
		
	КонецЕсли;
	
	// Переменная для хранения имени предопределенного элемента
	ИмяПредопределенногоЭлемента = "";

	// Глобальный обработчик "ПередКонвертациейОбъекта"
	Если мКонвертацияПередКонвертациейОбъекта = 1 Тогда
		
		Попытка
			Отказ = Шаблон("[Конвертация_ПередКонвертациейОбъекта(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)]");
		Исключение
			//ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(64, ОписаниеОшибки(), ПКО, Источник,"ПередКонвертациейОбъекта (глобальный)");
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(64, ОписаниеОшибки(), НомерПКО, Источник,"ПередКонвертациейОбъекта (глобальный)");
		КонецПопытки;
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик "ПередВыгрузкой"
	Если ПолучитьРеквизитПКО(НомерПКО, "ПередВыгрузкой") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Попытка
			Отказ = Шаблон("[ПКО_ПередВыгрузкой_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)]");
		Исключение
			//ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(41, ОписаниеОшибки(), ПКО, Источник, "ПередВыгрузкойОбъекта");
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(41, ОписаниеОшибки(), НомерПКО, Источник, "ПередВыгрузкойОбъекта");
		КонецПопытки;
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возможно, такие данные уже выгружались
	Если ВсеОбъектыВыгружены = 0 Тогда
		
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			УзелСсылки = ВыгруженныеОбъекты.Получить(КлючВыгружаемыхДанных);
			
			Если ПустоеЗначение(УзелСсылки) = 0 Тогда
				
				Возврат УзелСсылки;
				
			КонецЕсли;
			
		КонецЕсли;
		                                     
		Состояние("Выгружено объектов: " + мСчетчикВыгруженныхОбъектов);     
		
		мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;
		Нпп = мСчетчикВыгруженныхОбъектов;

		// Это позволит избежать циклических ссылок
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, Нпп);
			
		КонецЕсли;

	КонецЕсли; 
    
	СписокЗначенийВрем = ПолучитьРеквизитПКО(НомерПКО, "Значения");
    СписокЗначений = СоздатьОбъект("СписокЗначений");
    СписокЗначенийВрем.выгрузить(СписокЗначений);
	
	Если (ВерсияПлатформыПриемника = "8.0") Или (ВерсияПлатформыПриемника = "УП") Тогда
		
		Если ТипЗначения(Источник) <> 10 Тогда
			
			// Поиск в списке значений
			Если (ТипЗначения(Источник) = 16) Тогда //вид субконто
				
				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник.Идентификатор()));
				
			ИначеЕсли (ТипЗначения(Источник) = 14) Тогда //вид расчета
				
				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник.Код));
			
			Иначе

				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник));

			КонецЕсли;
			
			СписокЗначений.УдалитьВсе();
			
		Иначе
			
			ИмяПредопределенногоЭлемента = "";
			
		КонецЕсли;
		
	КонецЕсли;
		

	Если СписокЗначений.РазмерСписка() = 0 Тогда
		
		СвойстваПоиска = ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска");
		
		Если (СвойстваПоиска.КоличествоСтрок() > 0) ИЛИ (ПустаяСтрока(ИмяПредопределенногоЭлемента) = 0) Тогда
			
			Если (НеВыгружатьОбъектыСвойствПоСсылкам = 1) ИЛИ (ТолькоПолучитьУзелСсылки = 1) Тогда
				ВыгрузитьТолькоСсылку = 1;
			Иначе
		    	ВыгрузитьТолькоСсылку = 0;
			КонецЕсли;
			
			// Формируем узел ссылки
			УзелСсылки = СоздатьУзел(document, "Ссылка");
			
			Если (НеЗапоминатьВыгруженные = 0) И (ВсеОбъектыВыгружены = 0) Тогда
				
				УстановитьАтрибут(УзелСсылки, "Нпп", Нпп);
				
				Если НеСоздаватьЕслиНеНайден = 1 Тогда
					
					УстановитьАтрибут(УзелСсылки, "НеСоздаватьЕслиНеНайден", "true");
					
				КонецЕсли;
				
				ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска"), 
					УзелСсылки, , , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку);
				
				ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, УзелСсылки);
				
			Иначе
				
				ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска"), 
					УзелСсылки, , , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку);
				
			КонецЕсли;
			
		Иначе
			
			УзелСсылки = Нпп;
			
		КонецЕсли;
		
	Иначе
		
		// Поиск в списке значений
		Если (ТипЗначения(Источник) = 10) ИЛИ (ТипЗначения(Источник) = 16) Тогда //Перечисление или вид субконто
			
			УзелСсылки = СписокЗначений.Получить(Строка(Источник.Идентификатор()));

		Иначе

			УзелСсылки = СписокЗначений.Получить(Строка(Источник));

		КонецЕсли;
		
		Если УзелСсылки = мПустоеЗначение Тогда
			
			// Записываем ошибку в протокол выполнения.
			ЗП = ЗаписьПротоколаОбмена();
			ЗП.ИмяПКО              = ИмяПКО;
			ЗП.Значение            = Источник;
			ЗП.ТипЗначения         = ТипЗначенияСтр(Источник);
			ЗП.КСообщенияОбОшибках = 71;
			
			ЗаписатьВПротоколВыполнения(71, ЗП);

			ВывестиСообщение("Значение не найдено: " + Строка(Источник), "!!!");
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, УзелСсылки);
			
		КонецЕсли;
		
		Возврат УзелСсылки;
	
	КонецЕсли;
		
	Если (ТолькоПолучитьУзелСсылки = 1) ИЛИ (ВсеОбъектыВыгружены = 1) Тогда
		
		Возврат УзелСсылки;
		
	КонецЕсли; 
	
	Если Приемник = мПустоеЗначение Тогда
		
		Приемник = СоздатьУзел(document, "Объект");
		УстановитьАтрибут(Приемник, "Нпп", Нпп);
		УстановитьАтрибут(Приемник, "Тип", ПолучитьРеквизитПКО(НомерПКО, "Приемник"));
		УстановитьАтрибут(Приемник, "ИмяПравила", ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Если НеЗамещатьОбъектПриЗагрузке = 1 Тогда
			
			УстановитьАтрибут(Приемник, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если ПустаяСтрока(РежимЗаписи) = 0 Тогда
			
			УстановитьАтрибут(Приемник, "РежимЗаписи",	РежимЗаписи);
			
			Если ПустаяСтрока(РежимПроведения) = 0 Тогда
				
				УстановитьАтрибут(Приемник, "РежимПроведения",	РежимПроведения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗначенияСтр(УзелСсылки) <> "Число" Тогда
			
			// ДобавитьПодчиненный(Приемник, УзелСсылки.cloneNode(1));
			КлонироватьПодчиненным(Приемник, УзелСсылки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = 1;
   	
	// Обработчик "ПриВыгрузке"
	Если ПолучитьРеквизитПКО(НомерПКО, "ПриВыгрузке") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Попытка

			Отказ = Шаблон("[ПКО_ПриВыгрузке_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)]");

		Исключение
			//ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(42, ОписаниеОшибки(), ПКО, Источник, "ПриВыгрузкеОбъекта");
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(42, ОписаниеОшибки(), НомерПКО, Источник, "ПриВыгрузкеОбъекта");
		КонецПопытки;

	КонецЕсли;
	
	// Выгрузка свойств
	Если СтандартнаяОбработка = 1 Тогда
		
		Если (НеВыгружатьОбъектыСвойствПоСсылкам = 1) ИЛИ (ТолькоПолучитьУзелСсылки = 1) Тогда
			ВыгрузитьТолькоСсылку = 1;
		Иначе
			ВыгрузитьТолькоСсылку = 0;
		КонецЕсли;
		
		ВыгрузитьСвойства(document, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "Свойства"),
			, , , , ВыгрузитьТолькоСсылку);
		
	КонецЕсли; 
	
	// Обработчик ПослеВыгрузки
	Если ПолучитьРеквизитПКО(НомерПКО, "ПослеВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Попытка
			Отказ = Шаблон("[ПКО_ПослеВыгрузки_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, Приемник, УзелСсылки)]");
		Исключение
			// ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(43, ОписаниеОшибки(), ПКО, Источник, "ПослеВыгрузкиОбъекта");
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(43, ОписаниеОшибки(), НомерПКО, Источник, "ПослеВыгрузкиОбъекта");
		КонецПопытки;

		Если Число(Отказ) = 1 Тогда
			
			Возврат УзелСсылки;
			
		КонецЕсли;

	КонецЕсли;
	
	// Запись объекта
	ДобавитьПодчиненный(rootNode, Приемник);
	
	// Обработчик ПослеВыгрузкиВФайлОбмена
	Если ПолучитьРеквизитПКО(НомерПКО, "ПослеВыгрузкиВФайл") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Попытка
			Отказ = Шаблон("[ПКО_ПослеВыгрузкиВФайлОбмена_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, Приемник, УзелСсылки)]");
		Исключение
			// ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(79, ОписаниеОшибки(), ПКО, Источник, "ЕстьОбработчикПослеВыгрузкиВФайл");
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(79, ОписаниеОшибки(), НомерПКО, Источник, "ЕстьОбработчикПослеВыгрузкиВФайл");
		КонецПопытки;

		Если Число(Отказ) = 1 Тогда
			
			Возврат УзелСсылки;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат УзелСсылки;

КонецФункции // ВыгрузитьПоПравилу()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//Данные, ПравилоВыгрузкиДанных, , ИсходящиеДанные
// Объект,
// ПравилоВыгрузки, 
// Свойства=Неопределено, 
// ВходящиеДанные = Неопределено,
// НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, 
// ВыгрузкаСтрокиНабораЗаписей = Ложь, 
// УзелПредка = Неопределено, 
// ИмяКонстантыДляВыгрузки = "",
// ИмяПКО = "",
// ВызыватьСобытия = Истина)

Процедура ВыгрузкаОбъектаВыборки(document, Объект, Правило, ВходящиеДанные)
	
	Перем ИсходящиеДанные;
	
	Если мКомментироватьВыгрузкуОбъектов	= 1 Тогда
		
		Попытка
			ОбъектСтрока = Строка(Объект);
		Исключение
			ОбъектСтрока = "";
		КонецПопытки;

		Если ОбъектСтрока = "" Тогда
			ПрОбъекта = ОбъектСтрока + "  (" + ПолучитьОписаниеТипа(Объект) + ")";
		Иначе
			ПрОбъекта = ТипЗначенияСтр(Объект);
		КонецЕсли;
		
		ИмяСобытия = Шаблон("ВыгрузкаОбъекта: [ПрОбъекта]");
		
		ЗаписатьВПротоколВыполнения(ИмяСобытия, , 0, 1, 7);

		// Попытка
			
		// 	ПредставлениеОбъекта = Строка(Объект) + "  (" + ТипЗначенияСтр(Объект) + ")";
		// 	ВывестиСообщение("Выгрузка объекта выборки:  " + ПредставлениеОбъекта);
			
		// Исключение
			
		// 	ВывестиСообщение("Выгрузка объекта выборки:  " + ТипЗначенияСтр(Объект));
			
		// КонецПопытки; 
	
	КонецЕсли;
	
	ИмяПКО = Правило.Получить("КодПравилаКонвертации");
	
	НомерПКО = НайтиПравило(, ИмяПКО);
	
	// Глобальный обработчик "ПередВыгрузкойОбъекта"
	Если мКонвертацияПередВыгрузкойОбъекта = 1 Тогда
		
		Попытка
			Отказ = Шаблон("[Конвертация_ПередВыгрузкойОбъекта(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)]");
		Исключение
			Отказ = 1;
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(65, ОписаниеОшибки(), Правило.Имя,"ПередВыгрузкойОбъектаВыборки (глобальный)", Объект);
		КонецПопытки;

		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик "ПередВыгрузкойОбъекта"
	Если Правило.Получить("ПередВыгрузкойОбъекта") = 1 Тогда
		
		Попытка
			Отказ = Шаблон("[ПВД_ПередВыгрузкойОбъекта_" + СокрЛП(Правило.Получить("Код")) + "(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)]");
		Исключение
			Отказ = 1;
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(33, ОписаниеОшибки(), Правило.Имя, "ПередВыгрузкойОбъектаВыборки", Объект);
		КонецПопытки;
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
    УзелСсылки = мПустоеЗначение;
	
	ВыгрузитьПоПравилу(document, Объект,, ИсходящиеДанные,, ИмяПКО, УзелСсылки,, НомерПКО);
	
	// Глобальный обработчик "ПослеВыгрузкиОбъекта"
	Если мКонвертацияПослеВыгрузкиОбъекта = 1 Тогда
		Попытка
			Отказ = Шаблон("[Конвертация_ПослеВыгрузкиОбъекта(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные, УзелСсылки)]");
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(69, ОписаниеОшибки(), Правило.Имя,"ПослеВыгрузкиОбъектаВыборки (глобальный)", Объект);
		КонецПопытки;
	КонецЕсли;

	// Обработчик "ПослеВыгрузкиОбъекта"
	Если Правило.Получить("ПослеВыгрузкиОбъекта") = 1 Тогда
		Попытка
			Отказ = Шаблон("[ПВД_ПослеВыгрузкиОбъекта_" + СокрЛП(Правило.Получить("Код")) + "(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные, УзелСсылки)]");
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(34, ОписаниеОшибки(), Правило.Имя, "ПослеВыгрузкиОбъектаВыборки", Объект);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОбъектаВыборки()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьДанныеПоПравилу(document, ИмяПравилаВыгрузки)
	
	Перем ИсходящиеДанные, ВыборкаДанных;
	
	Перем Индекс;

	Если Число(мПараметрыВыгрузки.ПолучитьЗначение("ИнтерактивнаяВыгрузка")) = 1 Тогда
		ДатаНачала = мПараметрыВыгрузки.ПолучитьЗначение("ДатаНачала");
		ДатаОкончания = мПараметрыВыгрузки.ПолучитьЗначение("ДатаОкончания");
	КонецЕсли;
	
	мТаблицаПравилВыгрузки.НайтиЗначение(ИмяПравилаВыгрузки, Индекс, "Код");
	
	Если Индекс = 0 Тогда
		
		ВывестиСообщение("Не найдено правило выгрузки: " + ИмяПравилаВыгрузки, "!!");
		Возврат;
		
	КонецЕсли;
	
	Правило = мТаблицаПравилВыгрузки;
	ИмяПКО = мТаблицаПравилВыгрузки.КодПравилаКонвертации;
	
	Если мКомментироватьВыгрузкуОбъектов = 1 Тогда
		
		ВывестиСообщение("Начало обработки правила выгрузки данных:  " + ИмяПравилаВыгрузки);
		
	КонецЕсли;
	
	// Обработчик "ПередОбработкойПравила"
	Если Правило.ПередОбработкойПравила = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПередОбработкойПравила_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выборка данных
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
		                                                                           
		ЕстьОтбор = 0;
		Если ТипЗначенияСтр(мТаблицаПравилВыгрузки.Отбор) = "ТаблицаЗначений" Тогда
			мТаблицаПравилВыгрузки.Отбор.ВыбратьСтроки();
			Пока мТаблицаПравилВыгрузки.Отбор.ПолучитьСтроку() = 1 Цикл
				Если (мТаблицаПравилВыгрузки.Отбор.Использовать = 2) И (ПустаяСтрока(мТаблицаПравилВыгрузки.Отбор.ПолеОтбора)=0) Тогда
					ЕстьОтбор = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбъектВыборки = СтрЗаменить(Правило.ОбъектВыборки, "Ссылка", "");
		ИмяТипа = Лев(ОбъектВыборки, Найти(ОбъектВыборки, ".") - 1); 
		
		Если ЕстьОтбор = 1 Тогда      
			                       
			Запрос = СоздатьОбъект("Запрос");
		    ТекстЗапроса = СоздатьЗапрос(ОбъектВыборки, мТаблицаПравилВыгрузки.Отбор);
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Сообщить("Ошибка при выполнении запроса для отбора данных по правилу " + мТаблицаПравилВыгрузки.Наименование,"!"); 
				Сообщить("Выгрузка данных по этому правилу не проведена!","!");
			    Возврат;
			КонецЕсли;       
			
			Пока Запрос.Группировка("ПеремОбъект") = 1 Цикл       
				ВыгрузкаОбъектаВыборки(document, Запрос.ПеремОбъект, Правило, ИсходящиеДанные);
			КонецЦикла;
			
		Иначе         
			
			Если ИмяТипа = "Справочник" Тогда
	
				Выборка = СоздатьОбъект(ОбъектВыборки);
				Выборка.ВыбратьЭлементы(0);
				
				Пока Выборка.ПолучитьЭлемент() > 0 Цикл
					
					ВыгрузкаОбъектаВыборки(document, Выборка.ТекущийЭлемент(), Правило, ИсходящиеДанные);
					
				КонецЦикла;
				
			ИначеЕсли ИмяТипа = "Документ" Тогда
				
				Выборка = СоздатьОбъект(ОбъектВыборки);
				Выборка.ВыбратьДокументы(ДатаНачала, ДатаОкончания);
				
				Пока Выборка.ПолучитьДокумент() > 0 Цикл
					
					ВыгрузкаОбъектаВыборки(document, Выборка.ТекущийДокумент(), Правило, ИсходящиеДанные);
					
				КонецЦикла;
			
			ИначеЕсли ОбъектВыборки = "КонстантыНабор" Тогда
				
				ВыгрузкаОбъектаВыборки(document, Константа, Правило, ИсходящиеДанные);
	
			ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
				
				Возврат;
				
			Иначе
				
				Возврат;
				
			КонецЕсли;

			
		КонецЕсли;
		
			
	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда
		
		Если ПустоеЗначение(ВыборкаДанных) = 0 Тогда
			
			Если ТипЗначенияСтр(ВыборкаДанных) = "ТаблицаЗначений" Тогда
				
				ВыборкаДанных.ВыбратьСтроки();
				
				Пока ВыборкаДанных.ПолучитьСтроку() > 0 Цикл
					
					ВыборкаДанных.ТекущаяСтрока(ВыборкаДанных.НомерСтроки);
					ВыгрузкаОбъектаВыборки(document, ВыборкаДанных, Правило, ИсходящиеДанные);
				
				КонецЦикла;                                             
				
			ИначеЕсли ТипЗначенияСтр(ВыборкаДанных) = "СписокЗначений" Тогда
				
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ВыборкаДанных.РазмерСписка() Цикл     
					
					ОбъектДляВыгрузки = ВыборкаДанных.ПолучитьЗначение(СчетчикЦикла);	
					ВыгрузкаОбъектаВыборки(document, ОбъектДляВыгрузки, Правило, ИсходящиеДанные);
					
				КонецЦикла; 
			
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Обработчик "ПослеОбработкиПравила"
	Если Правило.ПослеОбработкиПравила = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПослеОбработкиПравила_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, ИсходящиеДанные)]");
		
	КонецЕсли;

КонецПроцедуры // ВыгрузитьДанныеПоПравилу()

// Создает в файле обмена запись об удалении объекта.
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - удаляемый объект.
//	ТипПриемника - Строка - Содержит строковое представление типа приемника.
//	ТипИсточника - Строка - Содержит строковое представление типа источника.
// 
Процедура ЗаписатьВФайлУдалениеОбъекта(document, Ссылка, Знач ТипПриемника, Знач ТипИсточника) Экспорт
	
	rootNode = document.ЭлементДокумента;

	Приемник = СоздатьУзел(document, "УдалениеОбъекта");
	
	УстановитьАтрибут(Приемник, "ТипПриемника", ТипПриемника);
	УстановитьАтрибут(Приемник, "ТипИсточника", ТипИсточника);
	
	УстановитьАтрибут(Приемник, "УникальныйИдентификатор", ПолучитьУникальныйИдентификатор(Ссылка));
	
	ДобавитьПодчиненный(rootNode, Приемник);
	
КонецПроцедуры

Процедура ОтработатьУдалениеОбъекта(document, Источник, ВхТипОбъекта, СтрокаСообщенияОбОшибке = "")
	
	// Ссылка = ДанныеОбУдаленииОбъекта.Ссылка;
	
	ТекстСобытия = "";
	//Если Конвертация.Свойство("ПередОтправкойИнформацииОбУдалении", ТекстСобытия) Тогда
	Если мКонвертацияПередОтправкойИнформацииОбУдалении = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПередОтправкойИнформацииОбУдалении(Ссылка, Отказ)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
	
	НомерПКО = НайтиПравило(Источник);
		
	Если НомерПКО = 0 Тогда
		
		ВывестиСообщение("Не найдено правило конвертации объекта: " + Строка(Источник), "!!!");
		//Возврат мПустоеЗначение;
		
	КонецЕсли;
	
	// Менеджер = Менеджеры[ТипЗнч(Ссылка)];
	
	// // Проверка на существование менеджера и ПКО.
	// Если    Менеджер = Неопределено
	// 	ИЛИ Менеджер.ПКО = Неопределено Тогда
		
	// 	ЗП = ЗаписьПротоколаОбмена(45);
		
	// 	ЗП.Объект = Ссылка;
	// 	ЗП.ТипОбъекта = ТипЗнч(Ссылка);
		
	// 	ЗаписатьВПротоколВыполнения(45, ЗП, Истина);
	// 	Возврат;
		
	// КонецЕсли;

	ТипИсточника          = ПолучитьРеквизитПКО(НомерПКО, "Источник");
	ТипПриемника          = ПолучитьРеквизитПКО(НомерПКО, "Приемник");
	
	ЗаписатьВФайлУдалениеОбъекта(document, Источник, ТипПриемника, ТипИсточника);
	
КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВывестиОбрабатываемоеПравило(ИмяПравила)
	
	Форма.ВывестиОбрабатываемоеПравило.Заголовок(ИмяПравила);

КонецПроцедуры // ВывестиОбрабатываемоеПравило(ИмяПравила)

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ОбработатьПравилаВыгрузки()
	
	// мТаблицаПравилВыгрузки.ВыбратьСтроки();
	
	// Пока мТаблицаПравилВыгрузки.ПолучитьСтроку() = 1 Цикл
		
	// 	Отключено = 0;
		
	// 	Позиция = ПравилаВыгрузкиСписок.НайтиЗначение(мТаблицаПравилВыгрузки.Код);
		
	// 	Если Позиция > 0 Тогда
			
	// 		Отключено = ?(ПравилаВыгрузкиСписок.Пометка(Позиция) = 1, 0, 1);
			
	// 	Иначе
			
	// 		Отключено = мТаблицаПравилВыгрузки.Отключить;
		
	// 	КонецЕсли;
		
	// 	Если Отключено = 1 Тогда
			
	// 		Продолжить;
			
	// 	КонецЕсли; 
	    
	// 	ВывестиОбрабатываемоеПравило(?(ПустоеЗначение(мТаблицаПравилВыгрузки.Наименование) = 1, мТаблицаПравилВыгрузки.Код, мТаблицаПравилВыгрузки.Наименование));
	// 	ВыгрузитьДанныеПоПравилу(мТаблицаПравилВыгрузки.Код);
		
	// КонецЦикла;
		
КонецПроцедуры // ОбработатьПравилаВыгрузки() 

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияФайлаОбмена(ВхПарсерХМЛ, document, rootNode, ВхИмяФайлаПравил)
	
	//УРБД
	//ДанныеПоОбмену ПланОбмена="_ДемоОбменСБиблиотекойСтандартныхПодсистем" Кому="EX" ОтКого="ДМ" НомерИсходящегоСообщения="78" НомерВходящегоСообщения="3" УдалитьРегистрациюИзменений="true" ВерсияОтправителя="3.0.1.428"
	
	//Общий
	//ФайлОбмена ВерсияФормата="3.1"
	//ДатаВыгрузки="2019-07-17T08:29:51"
	//ИмяКонфигурацииИсточника="БиблиотекаСтандартныхПодсистемДемо"
	//ВерсияКонфигурацииИсточника="2.4.4.65"
	//ИмяКонфигурацииПриемника="БиблиотекаСтандартныхПодсистемДемо"
	//ИдПравилКонвертации="ec46fcaa-aa19-4c1d-bc17-5c1d0e46b7a7"
	УстановитьАтрибут(rootNode, "ВерсияФормата", "2.0");
	УстановитьАтрибут(rootNode, "ДатаВыгрузки",  ПолучитьДатуV8(ТекущаяДата(), ТекущееВремя()));
	УстановитьАтрибут(rootNode, "ИмяКонфигурацииИсточника", мКонфигурацияИсточник);
	УстановитьАтрибут(rootNode, "ИмяКонфигурацииПриемника", мКонфигурацияПриемник);
	УстановитьАтрибут(rootNode, "ИдПравилКонвертации", мИд);

	//Если Число(мПараметрыВыгрузки.Получить("ИнтерактивнаяВыгрузка")) = 1 Тогда
	Если Число(мНастройкиОбмена.Получить("ИнтерактивнаяВыгрузка")) = 1 Тогда
		УстановитьАтрибут(rootNode, "НачалоПериодаВыгрузки", ПолучитьДатуV8(мПараметрыВыгрузки.ПолучитьЗначение("ДатаНачала")));
		УстановитьАтрибут(rootNode, "ОкончаниеПериодаВыгрузки", ПолучитьДатуV8(мПараметрыВыгрузки.ПолучитьЗначение("ДатаОкончания")));
		УстановитьАтрибут(rootNode, "Комментарий", "");
	КонецЕсли;
	
	// Правила обмена
	УзелПравилаОбмена = СоздатьУзел(document, "ПравилаОбмена");

	ЗаписатьЭлемент(document, УзелПравилаОбмена, "ВерсияФормата", мВерсияФормата);
	ЗаписатьЭлемент(document, УзелПравилаОбмена, "Ид", мИд);
	ЗаписатьЭлемент(document, УзелПравилаОбмена, "Наименование", мНаименование);
	ЗаписатьЭлемент(document, УзелПравилаОбмена, "ДатаВремяСоздания", мДатаВремяСоздания);
	ЗаписатьЭлемент(document, УзелПравилаОбмена, "Источник", мКонфигурацияИсточник);
	ЗаписатьЭлемент(document, УзелПравилаОбмена, "Приемник", мКонфигурацияПриемник);
	
	// Обработчики
	
	Если ПустоеЗначение(мКонвертацияПередЗагрузкойДанных) = 0 Тогда
		
		ЗаписатьЭлемент(document, УзелПравилаОбмена, "ПередЗагрузкойДанных", мКонвертацияПередЗагрузкойДанных);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПередЗагрузкойОбъекта) = 0 Тогда
		
		ЗаписатьЭлемент(document, УзелПравилаОбмена, "ПередЗагрузкойОбъекта", мКонвертацияПередЗагрузкойОбъекта);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПослеЗагрузкиОбъекта) = 0 Тогда
		
		ЗаписатьЭлемент(document, УзелПравилаОбмена, "ПослеЗагрузкиОбъекта", мКонвертацияПослеЗагрузкиОбъекта);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПослеЗагрузкиДанных) = 0 Тогда
		
		ЗаписатьЭлемент(document, УзелПравилаОбмена, "ПослеЗагрузкиДанных", мКонвертацияПослеЗагрузкиДанных);
	    
	КонецЕсли;
	
	// ПКО
	УзелПКО = СоздатьУзел(document, "ПравилаКонвертацииОбъектов");
	
	мТаблицаПравилКонвертацииОбъектов.ВыбратьСтроки();
	Пока мТаблицаПравилКонвертацииОбъектов.ПолучитьСтроку() > 0 Цикл
		
		УзелПравило = СоздатьУзел(document, "Правило");
		
		ЗаписатьЭлемент(document, УзелПравило, "Код", мТаблицаПравилКонвертацииОбъектов.Код);
		ЗаписатьЭлемент(document, УзелПравило, "Источник", мТаблицаПравилКонвертацииОбъектов.Источник);
		ЗаписатьЭлемент(document, УзелПравило, "Приемник", мТаблицаПравилКонвертацииОбъектов.Приемник);
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.НеЗамещать) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "НеЗамещать", мТаблицаПравилКонвертацииОбъектов.НеЗамещать);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", мТаблицаПравилКонвертацииОбъектов.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ГенерироватьНовыйНомерИлиКодЕслиНеУказан) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "ГенерироватьНовыйНомерИлиКодЕслиНеУказан", мТаблицаПравилКонвертацииОбъектов.ГенерироватьНовыйНомерИлиКодЕслиНеУказан);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПередЗагрузкой) = 0 Тогда
			
			ЗаписатьЭлемент(document, УзелПравило, "ПередЗагрузкой", мТаблицаПравилКонвертацииОбъектов.ПередЗагрузкой);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПриЗагрузке) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "ПриЗагрузке", мТаблицаПравилКонвертацииОбъектов.ПриЗагрузке);
		
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПослеЗагрузки) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "ПослеЗагрузки", мТаблицаПравилКонвертацииОбъектов.ПослеЗагрузки);
		
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПоследовательностьПолейПоиска) = 0 Тогда
		
			ЗаписатьЭлемент(document, УзелПравило, "ПоследовательностьПолейПоиска", мТаблицаПравилКонвертацииОбъектов.ПоследовательностьПолейПоиска);
		
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелПКО, УзелПравило);
		
	КонецЦикла;
	
	ДобавитьПодчиненный(УзелПравилаОбмена, УзелПКО);       
	                                          
	Если ТаблицаПараметровДляЗагрузки.КоличествоСтрок() > 0 Тогда
		УзелПараметры = СоздатьУзел(document, "Параметры");                    
		ТаблицаПараметровДляЗагрузки.ВыбратьСтроки();
		Пока ТаблицаПараметровДляЗагрузки.ПолучитьСтроку() = 1 Цикл
			УзелПараметр = СоздатьУзел(document, "Параметр");  
			УстановитьАтрибут(УзелПараметр, "Имя", ТаблицаПараметровДляЗагрузки.Имя); 
			УстановитьАтрибут(УзелПараметр, "Наименование", ТаблицаПараметровДляЗагрузки.Наименование);
			ДобавитьПодчиненный(УзелПараметры, УзелПараметр);       
		КонецЦикла;
		
		ДобавитьПодчиненный(УзелПравилаОбмена, УзелПараметры);       
	    
	КонецЕсли;
	
	// ПОД
	// Попытка
	// 	_DOMDocument = CreateObject("Msxml2.DOMDocument.4.0");
	// Исключение
	// 	_DOMDocument = CreateObject("Msxml2.DOMDocument");
	// КонецПопытки;

	_DOMDocument = ВхПарсерХМЛ.СоздатьДокумент();
	_DOMDocument.Кодировка = "UTF-8";
	
	_DOMDocument.load(ВхИмяФайлаПравил);
	
	УзелПОД = _DOMDocument.selectSingleNode("ПравилаОбмена/ПравилаОчисткиДанных");
	ДобавитьПодчиненный(УзелПравилаОбмена, УзелПОД);
	
	УзелАлгоритмы = _DOMDocument.selectSingleNode("ПравилаОбмена/Алгоритмы");
    ДобавитьПодчиненный(УзелПравилаОбмена, УзелАлгоритмы);

    УзелЗапросы = _DOMDocument.selectSingleNode("ПравилаОбмена/Запросы");
    ДобавитьПодчиненный(УзелПравилаОбмена, УзелЗапросы);
	
	_DOMDocument = 0;

	ДобавитьПодчиненный(rootNode, УзелПравилаОбмена)

КонецПроцедуры // ИнициализацияФайлаОбмена()

Процедура ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена(document, rootNode, ВхСписокПараметры, ВхНомерОтправленного)
	
	ВрмПриемник = СоздатьУзел(document, "ДанныеПоОбмену");
	
	УстановитьАтрибут(ВрмПриемник, "ПланОбмена", "СН_Обмен_77");
	УстановитьАтрибут(ВрмПриемник, "Кому", ВхСписокПараметры.Получить("id_remote"));
	УстановитьАтрибут(ВрмПриемник, "ОтКого", ВхСписокПараметры.Получить("id_self"));
	
	// Атрибуты механизма квитирования сообщений обмена.
	УстановитьАтрибут(ВрмПриемник, "НомерИсходящегоСообщения", ВхНомерОтправленного);
	УстановитьАтрибут(ВрмПриемник, "НомерВходящегоСообщения",  0);
	УстановитьАтрибут(ВрмПриемник, "УдалитьРегистрациюИзменений", "true");
	
	//УстановитьАтрибут(ВрмПриемник, "ВерсияОтправителя", СокрЛП(Метаданные.Версия));
	
	ДобавитьПодчиненный(rootNode, ВрмПриемник);
	
КонецПроцедуры


Процедура ВыполнитьВыгрузкуЗарегистрированныхДанных(document, ВхУзелОбменаИдентификатор, СтрокаСообщенияОбОшибке, ВхТаблицаПравилВыгрузкиИспользуемые, ВхПакетНомер)
	
	// Переменные-заглушки для поддержки механизма отладки кода обработчиков событий.
	Перем Отказ, ИмяПКО, ВыборкаДанных, ИсходящиеДанные;
	
	// Глобальный обработчик "ПередПолучениемИзмененныхОбъектов"
	Если мКонвертацияПередПолучениемИзмененныхОбъектов = 1 Тогда

		Попытка
			Отказ = Шаблон("[Конвертация_ПередПолучениемИзмененныхОбъектов()]");
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(175, ОписаниеОшибки(),"ПередПолучениемИзмененныхОбъектов (конвертация)");
			Возврат;
		КонецПопытки;

	КонецЕсли;

	ВрмТаблицаВыгружаемыхМетаданных = СоздатьОбъект("ТаблицаЗначений");
	ВхТаблицаПравилВыгрузкиИспользуемые.Выгрузить(ВрмТаблицаВыгружаемыхМетаданных, , , "Ид");
	
	// НачальнаяВыгрузкаДанных = ОбменДаннымиСервер.УстановленПризнакНачальнойВыгрузкиДанных(ЗаписьСообщения.Получатель);

	// ВЫБОРКА ИЗМЕНЕНИЙ
	ВыборкаИзменений = ВыбратьИзменения(ВхУзелОбменаИдентификатор, ВрмТаблицаВыгружаемыхМетаданных, ВхПакетНомер);

	ВывестиСодержаниеТЗ(ВыборкаИзменений);
	
	ОбъектМетаданныхПредыдущий      = 0;
	ПравилоВыгрузкиДанныхПредыдущее = ПолучитьПустоеЗначение();
	ПравилоВыгрузкиДанных           = ПолучитьПустоеЗначение();
	НомерФайлаВыгрузки              = 0;
	СтрокаФайла                     = ПолучитьПустоеЗначение();
	ВыгружаетсяРегистр              = 0;
	ВыгружаютсяКонстанты            = 0;
	
	// Попытка
		КоличествоОбъектовКВыгрузке = ВыборкаИзменений.КоличествоСтрок();

		// 	УзелДляОбменаОбъект = УзелДляОбмена.ПолучитьОбъект();
		
		Для ВрмИндексСтрокиИзменений = 1 По ВыборкаИзменений.КоличествоСтрок() Цикл
			
			// ВыборкаИзменений.ТекущаяСтрока(ВрмИндексСтрокиИзменений);

				
		// 		Инкремент(ПолеСчетчикВыгруженныхОбъектов);
		// 		ОбменДаннымиСервер.РассчитатьПроцентВыгрузки(СчетчикВыгруженныхОбъектов(), КоличествоОбъектовКВыгрузке);
			ОбъектМетаданныхТекущий = ВыборкаИзменений.ПолучитьЗначение(ВрмИндексСтрокиИзменений, "TYPEID");
			ИдентификаторОбъектаВнутр = ВыборкаИзменений.ПолучитьЗначение(ВрмИндексСтрокиИзменений, "OBJID");
			
			ВрмОбъектаВнутр = ПолучитьСтрокуВнутреннюю(ОбъектМетаданныхТекущий, ИдентификаторОбъектаВнутр);	
			Данные = ЗначениеИзСтрокиВнутр(ВрмОбъектаВнутр);
			//ВыборкаИзменений.Получить();
				
			ТипДанныхДляВыгрузки = СокрЛП(ВыборкаИзменений.ПолучитьЗначение(ВрмИндексСтрокиИзменений, "DELETED"));
				
			// Выгружается новый тип объекта метаданных.
			Если ОбъектМетаданныхПредыдущий <> ОбъектМетаданныхТекущий Тогда
					
				Если ОбъектМетаданныхПредыдущий <> 0 Тогда
					
					// {ОБРАБОТЧИК ПослеОбработки ПВД}
					Если ПравилоВыгрузкиДанныхПредыдущее.РазмерСписка() = 0 Тогда

					ИначеЕсли ПравилоВыгрузкиДанныхПредыдущее.Получить("ПослеОбработки") = 1 Тогда
						
						Попытка
							
							Отказ = Шаблон("[ПВД_ПослеОбработкиПравила_" + СокрЛП(ПравилоВыгрузкиДанныхПредыдущее.Получить("Код")) + "(ИмяПКО, Правило, ИсходящиеДанные)]");
							
						Исключение
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПравилоВыгрузкиДанныхПредыдущее.Имя, "ПослеОбработкиВыгрузкиДанных");
						КонецПопытки;
						
					КонецЕсли;
					// {ОБРАБОТЧИК ПослеОбработки ПВД}
					
				КонецЕсли;
				
				ОбъектМетаданныхПредыдущий = ОбъектМетаданныхТекущий;
				
				ВыгружаетсяРегистр = 0;
				ВыгружаютсяКонстанты = 0;
				
				// СтруктураДанных = МенеджерыДляПлановОбмена[ОбъектМетаданныхТекущий];
				
				// Если СтруктураДанных = Неопределено Тогда
					
				// 	ВыгружаютсяКонстанты = Метаданные.Константы.Содержит(ОбъектМетаданныхТекущий);
					
				// ИначеЕсли СтруктураДанных.ЭтоРегистр = Истина Тогда
					
				// 	ВыгружаетсяРегистр = Истина;
					
				// КонецЕсли;
				
				// Если ВыгружаютсяКонстанты Тогда
					
				// 	ПравилоВыгрузкиДанных = ТаблицаПравилВыгрузкиИспользуемые.Найти(Тип("КонстантыНабор"), "ОбъектВыборкиМетаданные");
					
				// Иначе
					ВрмИндексПравилоВыгрузкиДанных = 0;
					ВхТаблицаПравилВыгрузкиИспользуемые.НайтиЗначение(ОбъектМетаданныхТекущий, ВрмИндексПравилоВыгрузкиДанных, "Ид");
					ПравилоВыгрузкиДанных = ПолучитьСтрокуТаблицыСписком(ВхТаблицаПравилВыгрузкиИспользуемые, ВрмИндексПравилоВыгрузкиДанных);
					
				// КонецЕсли;
				
				ПравилоВыгрузкиДанныхПредыдущее = ПравилоВыгрузкиДанных;
				
				// {ОБРАБОТЧИК ПередОбработкой ПВД}
				ИсходящиеДанные = ПолучитьПустоеЗначение();
				
				Если ПравилоВыгрузкиДанных.РазмерСписка() = 0 Тогда

				ИначеЕсли ПравилоВыгрузкиДанных.Получить("ПередОбработкой") = 1 Тогда
					
					Попытка

						Отказ = Шаблон("[ПВД_ПередОбработкойПравила_" + СокрЛП(ПравилоВыгрузкиДанных.Получить("Код")) + "(ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)]");
						
					Исключение
						ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), ПравилоВыгрузкиДанных.Имя, "ПередОбработкойВыгрузкиДанных");
					КонецПопытки;
					
				КонецЕсли;
				// {ОБРАБОТЧИК ПередОбработкой ПВД}
					
			КонецЕсли;

			// Отрабатываем удаление объекта.
			Если ТипДанныхДляВыгрузки = "D" Тогда
					
				ОтработатьУдалениеОбъекта(document, Данные, ПравилоВыгрузкиДанных.Получить("ОбъектВыборки"));
				Продолжить;

			КонецЕсли;
				
		// 		// ВЫГРУЗКА ОБЪЕКТА
		// 		Если ВыгружаетсяРегистр Тогда
					
		// 			// выгрузка регистра
		// 			ВыгрузкаРегистра(Данные, ПравилоВыгрузкиДанных, ИсходящиеДанные, НеВыгружатьОбъектыПоСсылкам);
					
		// 		ИначеЕсли ВыгружаютсяКонстанты Тогда
					
		// 			// выгрузка набора констант
		// 			Свойства = Менеджеры[Тип("КонстантыНабор")];
					
		// 			ВыгрузитьНаборКонстант(ПравилоВыгрузкиДанных, Свойства, ИсходящиеДанные, ОбъектМетаданныхТекущий.Имя);
					
		// 		Иначе
					
				// выгрузка ссылочных типов
				ВыгрузкаОбъектаВыборки(document, Данные, ПравилоВыгрузкиДанных, ИсходящиеДанные);//, НеВыгружатьОбъектыПоСсылкам);
					
		// 		КонецЕсли;
				
		КонецЦикла;

		Если ОбъектМетаданныхПредыдущий <> 0 Тогда
					
			// {ОБРАБОТЧИК ПослеОбработки ПВД}
			Если ПравилоВыгрузкиДанныхПредыдущее.РазмерСписка() = 0 Тогда

			ИначеЕсли ПравилоВыгрузкиДанныхПредыдущее.Получить("ПослеОбработки") = 1 Тогда
				
				Попытка
					
					Отказ = Шаблон("[ПВД_ПослеОбработкиПравила_" + СокрЛП(ПравилоВыгрузкиДанныхПредыдущее.Получить("Код")) + "(ИмяПКО, Правило, ИсходящиеДанные)]");
					
				Исключение
					ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПравилоВыгрузкиДанных.Имя, "ПослеОбработкиВыгрузкиДанных");
				КонецПопытки;
				
			КонецЕсли;
			// {ОБРАБОТЧИК ПослеОбработки ПВД}
			
		КонецЕсли;
		
	// Исключение
		
	// 	// ВызватьИсключение(НСтр("ru = 'Ошибка при отправке данных" + ": " + ОписаниеОшибки());
		
	// КонецПопытки
	
КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ВыполнитьВыгрузку(ВхУзелОбменаИдентификатор, ВхСписокПараметры, ВхИмяФайлаДанных = "")
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	ВрмВозврат.Установить("СтатусВозврата", 0);
	//ВхИмяФайлаПравил, ВхИмяФайлаДанных)
	ВрмВыгрузитьИнформациюСопоставления = 0;

	мСчетчикВыгруженныхОбъектов = 0;
	
	// Если ПустаяСтрока(ВхИмяФайлаДанных) = 1 Тогда
		
	// 	Если Форма.МодальныйРежим() = 0 Тогда
	// 		Предупреждение("Не указано имя файла данных!");
	// 	Иначе
	// 		Сообщить("Не указано имя файла данных!");
	// 	КонецЕсли;
	// 	Возврат;
		
	// КонецЕсли;

	ВрмИмяФайлаПравил = ВхСписокПараметры.Получить("rules");
	// ВхИмяФайлаДанных = ВрмИмяФайлаПравил + ".xml";


	// Инициализация правил
	ИнициализацияПравилВыгрузки();
	ИнициализацияПравилКонвертацииОбъектов();

	// Инициализация таблицы настройки параметров
	ИнициализацияТаблицыНастройкиПараметров();
	
	ЗагрузитьПравила(ВрмИмяФайлаПравил);

	ТекущийУровеньВложенностиВыгрузитьПоПравилу = 0;
	
	ИнициализироватьМенеджерыИСообщения();

	// Загрузка правил
	// Если мТаблицаПравилВыгрузки.КоличествоСтрок() = 0 Тогда
		
	// 	Если ЗагрузитьПравила(ВрмИмяФайлаПравил) = 0 Тогда
			
	// 		Возврат ВрмВозврат;
			
	// 	КонецЕсли;
		
	// Иначе
		
	// 	мТаблицаПравилКонвертацииОбъектов.Заполнить(0,,, "ВсеОбъектыВыгружены");
		
	// 	мТаблицаПравилКонвертацииОбъектов.ВыбратьСтроки();
		
	// 	Пока мТаблицаПравилКонвертацииОбъектов.ПолучитьСтроку() > 0 Цикл
			
	// 		мТаблицаПравилКонвертацииОбъектов.Выгруженные.УдалитьВсе();
		    
	// 	КонецЦикла;
		
		
	// КонецЕсли;
	
	ВывестиСообщение("Начало выгрузки:   " + ТекущаяДата() + " " + ТекущееВремя());
	
	Если ТипЗначенияСтр(Параметры) = "ТаблицаЗначений" Тогда
		
        Параметры.УдалитьСтроки();
		Параметры.НоваяСтрока();
		Параметры.ТекущаяСтрока(Параметры.КоличествоСтрок());
	    
	КонецЕсли;
	
	// Попытка
	// 	DOMDocument = CreateObject("Msxml2.DOMDocument.4.0");
	// Исключение
	// 	DOMDocument = CreateObject("Msxml2.DOMDocument");
	// КонецПопытки;
	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	DOMDocument = ВрмПарсерХМЛ.СоздатьДокумент();
	DOMDocument.Кодировка = "UTF-8";
	//DOMDocument = ПолучитьCOMОбъект("AddIn.XMLParser");;
	
	rootNode = DOMDocument.createNode(1, "ФайлОбмена", "");
	DOMDocument.appendChild(rootNode);

	ИнициализацияФайлаОбмена(ВрмПарсерХМЛ, DOMDocument, rootNode, ВрмИмяФайлаПравил);    
	                                   
	// Сохраняем текущие настройки отбора 
	// СохранитьНастройкиОтбора();

	// Устанавливат значения парамтров в структуре Параметры 
	// по таблице ТаблицаНастройкиПараметров
    ТаблицаНастройкиПараметров.ВыбратьСтроки();
	Пока ТаблицаНастройкиПараметров.ПолучитьСтроку() = 1 Цикл
		Параметры.УстановитьЗначение(1, СокрЛП(ТаблицаНастройкиПараметров.Имя), ТаблицаНастройкиПараметров.Значение);
	КонецЦикла;
	
	// Глобальный обработчик "ПередВыгрузкойДанных"
	Если мКонвертацияПередВыгрузкойДанных = 1 Тогда
		
		Попытка
			Отказ = Шаблон("[Конвертация_ПередВыгрузкойДанных()]");
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(62, ОписаниеОшибки(),"ПередВыгрузкойДанных (конвертация)");
			Отказ = 1;
		КонецПопытки;

		Если Число(Отказ) = 1 Тогда
			
			ЗавершитьВедениеПротоколаОбмена();
			Возврат ВрмВозврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВрмНомерОтправленного = ПолучитьНомерОтправленного(ВхУзелОбменаИдентификатор) + ?(ВрмВыгрузитьИнформациюСопоставления = 1, 2, 1);
	
	ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена(DOMDocument, rootNode, ВхСписокПараметры, ВрмНомерОтправленного);


	// выгружаем измененные
	//
	// ОбработатьПравилаВыгрузки();

	ВрмТаблицаМетаданные = мНастройкиОбмена.Получить("Метаданные");

	ВрмТаблицаПравилВыгрузкиИспользуемые = СоздатьОбъект("ТаблицаЗначений");
	ВрмТаблицаПравилВыгрузкиИспользуемые.Загрузить(мТаблицаПравилВыгрузки);
	ВрмТаблицаПравилВыгрузкиИспользуемые.НоваяКолонка("Ид", "Число");
	ВрмТаблицаПравилВыгрузкиИспользуемые.УдалитьКолонку("НомерГруппы");
	ВрмТаблицаПравилВыгрузкиИспользуемые.УдалитьКолонку("Отбор");
	ВрмТаблицаПравилВыгрузкиИспользуемые.УдалитьКолонку("Комментарий");
	ВрмТаблицаПравилВыгрузкиИспользуемые.УдалитьКолонку("Описание");

	ВрмСписокУдаляемые = СоздатьОбъект("СписокЗначений");
	Для ВрмИндексПравила = 1 По ВрмТаблицаПравилВыгрузкиИспользуемые.КоличествоСтрок() Цикл
		Если ВрмТаблицаПравилВыгрузкиИспользуемые.ПолучитьЗначение(ВрмИндексПравила, "Отключить") = 1 Тогда
			ВрмСписокУдаляемые.Установить(ВрмИндексПравила, ВрмИндексПравила);
			Продолжить;
		ИначеЕсли ВрмТаблицаПравилВыгрузкиИспользуемые.ПолучитьЗначение(ВрмИндексПравила, "ЭтоГруппа") = 1 Тогда
			ВрмСписокУдаляемые.Установить(ВрмИндексПравила, ВрмИндексПравила);
			Продолжить;
		КонецЕсли;

		ВрмСтрокаМетаданныеПолноеИмя = СтрЗаменить(ВрмТаблицаПравилВыгрузкиИспользуемые.ПолучитьЗначение(ВрмИндексПравила, "ОбъектВыборки"), "Ссылка", "");

		ВрмИндексМетаданные = 0;
		Если ВрмТаблицаМетаданные.НайтиЗначение(ВрмСтрокаМетаданныеПолноеИмя, ВрмИндексМетаданные, "ПолноеИмя") = 1 Тогда
			ВрмЗначение = ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "Ид");
			ВрмТаблицаПравилВыгрузкиИспользуемые.УстановитьЗначение(ВрмИндексПравила, "Ид", ВрмЗначение);
			//Сообщить("[" + ВрмСтрокаМетаданныеПолноеИмя + "][" + ВрмЗначение + "]");
		Иначе
			Сообщить("Ошибка метаданные [" + ВрмСтрокаМетаданныеПолноеИмя + "] не найдены");
		КонецЕсли;

	КонецЦикла;
	ВрмСписокУдаляемые.Сортировать(1);
	Для ВрмИндексЭлементаСпискаУдаляемых = 1 По ВрмСписокУдаляемые.РазмерСписка() Цикл
		ВрмТаблицаПравилВыгрузкиИспользуемые.УдалитьСтроку(ВрмСписокУдаляемые.ПолучитьЗначение(ВрмИндексЭлементаСпискаУдаляемых));
	КонецЦикла;
	// ВЫПОЛНЯЕМ ВЫГРУЗКУ ЗАРЕГИСТРИРОВАННЫХ ДАННЫХ
	// ЗаписьXML = Новый ЗаписьXML;
	// ЗаписьXML.УстановитьСтроку();
	// ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	// ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелДляОбмена);

	СтрокаСообщенияОбОшибке = "";

	// Попытка
	ВыполнитьВыгрузкуЗарегистрированныхДанных(DOMDocument, ВхУзелОбменаИдентификатор, СтрокаСообщенияОбОшибке, ВрмТаблицаПравилВыгрузкиИспользуемые, ВрмНомерОтправленного);
	// Исключение
	// 	Отказ = 1;
	// 	//ЗаписатьВПротоколВыполнения(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	// 	ЗаписатьВПротоколВыполнения(ОписаниеОшибки());
	// КонецПопытки;

	
	// Глобальный обработчик "ПослеВыгрузкиДанных"
	Если мКонвертацияПослеВыгрузкиДанных = 1 Тогда

		Попытка
			Отказ = Шаблон("[Конвертация_ПослеВыгрузкиДанных()]");
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(63, ОписаниеОшибки(),"ПослеВыгрузкиДанных (конвертация)");
			Отказ = 1;
		КонецПопытки;

		Если Число(Отказ) = 1 Тогда
			
			ЗавершитьВедениеПротоколаОбмена();
			Возврат ВрмВозврат;
			
		КонецЕсли;
		
	КонецЕсли;

	DOMDocument.save(ВхИмяФайлаДанных);

	Если Отказ = 1 Тогда
	// 	ЗаписьСообщения.ПрерватьЗапись();
	Иначе
	// 	ЗаписьСообщения.ЗакончитьЗапись();
		ОбновитьНомерОтправленного(ВхУзелОбменаИдентификатор, ВрмНомерОтправленного);
	КонецЕсли;
	
	// ЗаписьXML.Закрыть();
	// ЗаписьXML = Неопределено;

	//УстановитьНомерОтправленного(ВхУзелОбменаИдентификатор, ВрмНомерОтправленного);
	
	DOMDocument = 0;
	ВрмПарсерХМЛ = 0;

	ВрмВозврат.Установить("СтатусВозврата", 1);

	ВывестиСообщение("Выгружено объектов:   " + мСчетчикВыгруженныхОбъектов);
	
	ВывестиСообщение("Окончание выгрузки:   " + ТекущаяДата() + " " + ТекущееВремя());

	Возврат ВрмВозврат;

КонецФункции // ВыполнитьВыгрузку()


Функция ВыполнитьВыгрузкуДанных(ВхУзелОбменаИдентификатор, ВхСписокПараметры)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	ВрмВозврат.Установить("СтатусВозврата", 0);

	ПолеСтрокаСообщенияОбОшибке = "";

	ВрмИнфо = ПолучитьCOMОбъект("AddIn.V7SysInfo");
	ВрмИдСообщения = ВрмИнфо.СоздатьGUID();
	ВрмИдПередачи = ВрмИнфо.СоздатьGUID();
	ВрмИнфо = ПолучитьПустоеЗначение();

	// ВрмКаталогОбменаУзла = мКаталогОбмена + ВхУзелОбменаИдентификатор + "\";
	ВрмПутьКаталогИсходящихСообщений = Шаблон("[мКаталогОбмена][ВхУзелОбменаИдентификатор]\Out\");
	ВрмПутьКаталогФайла = Шаблон("[ВрмПутьКаталогИсходящихСообщений][ВрмИдПередачи]\");
	ВрмПутьКаталогСообщения = Шаблон("[ВрмПутьКаталогФайла]data\");
	
	ВрмПутьФайлСообщения = Шаблон("[ВрмПутьКаталогСообщения]Message{[ВрмИдСообщения]}.xml");
	
	Если ФС.СуществуетФайл(ВрмПутьКаталогИсходящихСообщений) = 0 Тогда
		ФС.СоздатьКаталог(ВрмПутьКаталогИсходящихСообщений);
	КонецЕсли;

	Если ФС.СуществуетФайл(ВрмПутьКаталогФайла) = 0 Тогда
		ФС.СоздатьКаталог(ВрмПутьКаталогФайла);
	КонецЕсли;

	Если ФС.СуществуетФайл(ВрмПутьКаталогСообщения) = 0 Тогда
		ФС.СоздатьКаталог(ВрмПутьКаталогСообщения);
	КонецЕсли;

	ИнициализироватьВедениеПротоколаОбмена(ВхУзелОбменаИдентификатор);

	// ВЫГРУЗКА ДАННЫХ
	// Попытка
		ВрмВозврат = ВыполнитьВыгрузку(ВхУзелОбменаИдентификатор, ВхСписокПараметры, ВрмПутьФайлСообщения);
	// Исключение
	// 	// ЗаписатьВПротоколВыполнения(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	// 	ЗавершитьВедениеПротоколаОбмена();
	// 	// ФайлОбмена = Неопределено;
	// 	// ПолеВыгруженныеПоСсылкеОбъекты = Неопределено;
	// 	// ПолеСозданныеПриВыгрузкеОбъекты = Неопределено;
	// 	// ПолеВыгружаемыеПоСсылкеОбъектыМетаданных = Неопределено;
	// 	Возврат ВрмВозврат;

	// КонецПопытки;
	Если ПолучитьСтатусВозврата(ВрмВозврат) = 1 Тогда

		ВрмURLВебСервиса = ВхСписокПараметры.Получить("soap_uri");
		
		ВрмПолныйПутьАрхива = Шаблон("[ВрмПутьКаталогФайла]data.zip");
		Архивировать(ВрмПутьФайлСообщения, Шаблон("Message{[ВрмИдСообщения]}.xml"), ВрмПолныйПутьАрхива);
		ВрмСписокЧастей = SplitFile(ВрмПолныйПутьАрхива);

		Для ВрмИндексЧастиФайла = 1 По ВрмСписокЧастей.РазмерСписка() Цикл

			ВрмЧастьФайла = ВрмСписокЧастей.ПолучитьЗначение(ВрмИндексЧастиФайла);

			ВрмЧастиИмениФайла = РазложитьПолноеИмяФайла(ВрмЧастьФайла);
			ВрмКаталог = ВрмЧастиИмениФайла.Получить("Каталог");
			ВрмИмяФайлаБезРасширения = ВрмЧастиИмениФайла.Получить("ИмяФайлаБезРасширения");
			ВрмРасширение = ВрмЧастиИмениФайла.Получить("Расширение");

			ВрмЧастьФайлаBase64 = Шаблон("[ВрмКаталог][ВрмИмяФайлаБезРасширения].b64.[ВрмРасширение]");
			FileToFileBase64(ВрмЧастьФайла, ВрмЧастьФайлаBase64);
			
			ВрмСписокЧастей.УстановитьЗначение(ВрмИндексЧастиФайла, ВрмЧастьФайлаBase64);

		КонецЦикла;

		Для ВрмИндексЧастиФайла = 1 По ВрмСписокЧастей.РазмерСписка() Цикл
			
			ВрмЧастьФайлаBase64 = ВрмСписокЧастей.ПолучитьЗначение(ВрмИндексЧастиФайла);

			ВрмПараметры = СоздатьОбъект("СписокЗначений");
			ВрмПараметры.Установить("TransferId", ВрмИдПередачи);
			ВрмПараметры.Установить("PartNumber", ВрмИндексЧастиФайла);
			ВрмПараметры.Установить("PartData", ФайлВСтроку(ВрмЧастьФайлаBase64));
		
			ВрмТелоЗапроса = ПолучитьТекстЗапрооса("PutFilePart", "http://www.1c.ru/SSL/Exchange_2_0_1_6", ВрмПараметры);
			ВрмВозврат = ЗапросSOAP(ВрмURLВебСервиса, "Exchange_2_0_1_6", ВрмТелоЗапроса);
		
			Если Число(ВрмВозврат.Получить("СтатусВозврата")) = 0 Тогда
				Прервать;
				//Возврат ВрмВозврат;
			КонецЕсли;

			// ВрмЧастиИмениФайла = РазложитьПолноеИмяФайла(ВрмЧастьФайла);
			// ВрмКаталог = ВрмЧастиИмениФайла.Получить("Каталог");
			// ВрмИмяФайлаБезРасширения = ВрмЧастиИмениФайла.Получить("ИмяФайлаБезРасширения");
			// ВрмРасширение = ВрмЧастиИмениФайла.Получить("Расширение");

			// ВрмЧастьФайлаBase64 = Шаблон("[ВрмКаталог][ВрмИмяФайлаБезРасширения].b64.[ВрмРасширение]");
			// FileToFileBase64(ВрмЧастьФайла, ВрмЧастьФайлаBase64);
			
			// ВрмСписокЧастей.УстановитьЗначение(ВрмИндексЧастиФайла, ВрмЧастьФайлаBase64);

		КонецЦикла;

		ВрмПараметры = СоздатьОбъект("СписокЗначений");
		ВрмПараметры.Установить("TransferId", ВрмИдПередачи);
		ВрмПараметры.Установить("PartQuantity", ВрмСписокЧастей.РазмерСписка());
	
		ВрмТелоЗапроса = ПолучитьТекстЗапрооса("SaveFileFromParts", "http://www.1c.ru/SSL/Exchange_2_0_1_6", ВрмПараметры);
		ВрмВозврат = ЗапросSOAP(ВрмURLВебСервиса, "Exchange_2_0_1_6", ВрмТелоЗапроса);
	
		Если Число(ВрмВозврат.Получить("СтатусВозврата")) = 0 Тогда
			// Прервать;
			//Возврат ВрмВозврат;
		КонецЕсли;
		
		ВрмИдФайла = SaveFileFromPartsResponse(ВрмВозврат.Получить("Результат"));

		ВрмПараметры = СоздатьОбъект("СписокЗначений");
		ВрмПараметры.Установить("ExchangePlanName", "СН_Обмен_77"); //ВхСписокПараметры.Получить();
		ВрмПараметры.Установить("NodeCode", ВхСписокПараметры.Получить("id_self"));
		ВрмПараметры.Установить("FileID", ВрмИдФайла);
		ВрмПараметры.Установить("ContinuousOperation", "false");
		ВрмПараметры.Установить("Operation", "");
		ВрмПараметры.Установить("ContinuousOperationAllowed", "false");
	
		ВрмТелоЗапроса = ПолучитьТекстЗапрооса("DownloadData", "http://www.1c.ru/SSL/Exchange_2_0_1_6", ВрмПараметры);
		ВрмВозврат = ЗапросSOAP(ВрмURLВебСервиса, "Exchange_2_0_1_6", ВрмТелоЗапроса);
	
		Если Число(ВрмВозврат.Получить("СтатусВозврата")) = 0 Тогда
			// Прервать;
			//Возврат ВрмВозврат;
		КонецЕсли;

	КонецЕсли;
	
	ЗавершитьВедениеПротоколаОбмена();

	Возврат ВрмВозврат;

КонецФункции // ВыполнитьВыгрузкуДанных()
 
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьЗапрос(ОбъектВыборки, ТабОтбор)  
	
	ПрефиксЗапроса    = "Обрабатывать Все; "; 
	ПрефиксЗапросаДок = "ОбрабатыватьДокументы Все; ";
	      
	
	Если Найти(ОбъектВыборки, "Справочник.") = 1 Тогда 
		стрТекущий = ".ТекущийЭлемент";  
	Иначе                                
		стрТекущий = ".ТекущийДокумент";  
	КонецЕсли;
	
	ТекстЗапроса = "ПеремОбъект = " +  ОбъектВыборки +  стрТекущий + ";";

	ТабОтбор.ВыбратьСтроки();		   
	Пока ТабОтбор.ПолучитьСтроку() = 1 Цикл   
		Если (ТабОтбор.ПолеОтбора = "ТекущийЭлемент") ИЛИ (ТабОтбор.ПолеОтбора = "ТекущийДокумент") Тогда
			Продолжить;
		КонецЕсли;
		Если (ТабОтбор.Использовать = 1) ИЛИ (ПустаяСтрока(ТабОтбор.ПолеОтбора) = 1) Тогда
			Продолжить;
		КонецЕсли;
                                                   
		Если (ТабОтбор.Объект = "ПометкаУдаления") Тогда
			Если ТабОтбор.Значение = 0 Тогда
				ПрефиксЗапроса = "Обрабатывать НеПомеченныеНаУдаление; ";
			Иначе	                                                          
				ПрефиксЗапроса = "Обрабатывать ПомеченныеНаУдаление; ";
			КонецЕсли;   
			Продолжить;
		КонецЕсли;

		Если (ТабОтбор.Объект = "Проведен") Тогда
			Если ТабОтбор.Значение = 0 Тогда
				ПрефиксЗапросаДок = "ОбрабатыватьДокументы Непроведенные; ";
			Иначе	                                                          
				ПрефиксЗапросаДок = "ОбрабатыватьДокументы Проведенные; ";
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " Перем" + ТабОтбор.НомерСтроки +" = " +  ОбъектВыборки + "." + ТабОтбор.ПолеОтбора + ";";//" Группировка ПеремОбъект; Без Итогов;";
	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + " Группировка ПеремОбъект;";    
	
	ТабОтбор.ВыбратьСтроки();		   
	Пока ТабОтбор.ПолучитьСтроку() = 1 Цикл
		ЗначенияДляОтбора[ТабОтбор.НомерСтроки] = ТабОтбор.Значение; 
		Если (ТабОтбор.Использовать = 1) ИЛИ (ПустаяСтрока(ТабОтбор.ПолеОтбора) = 1) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТабОтбор.ПолеОтбора = "ТекущийЭлемент") ИЛИ (ТабОтбор.ПолеОтбора = "ТекущийДокумент") Тогда
			ИмяПеременной = "ПеремОбъект";   
		ИначеЕсли (ТабОтбор.Объект = "ПометкаУдаления") ИЛИ (ТабОтбор.Объект = "Проведен") Тогда	
			Продолжить;
		Иначе	                          
			ИмяПеременной = "Перем" + ТабОтбор.НомерСтроки;
		КонецЕсли;                                                 
		Если ТабОтбор.Условие = "НЕ В" Тогда                                                                                                   
			ТекстЗапроса = ТекстЗапроса + "Условие (НЕ (" + ИмяПеременной + " В  ЗначенияДляОтбора[" + ТабОтбор.НомерСтроки + "]));";
		Иначе    
			ТекстЗапроса = ТекстЗапроса + "Условие (" + ИмяПеременной + " "+ ТабОтбор.Условие + " ЗначенияДляОтбора[" + ТабОтбор.НомерСтроки + "]);";
		КонецЕсли;
	КонецЦикла;                 
	                     
	Если Найти(ОбъектВыборки, "Документ.") = 1 Тогда 
		ТекстЗапроса = ПрефиксЗапроса + ПрефиксЗапросаДок + ТекстЗапроса;  
	Иначе                                
		ТекстЗапроса = ПрефиксЗапроса + ТекстЗапроса;  
	КонецЕсли;
                              
	Возврат ТекстЗапроса;
	
КонецФункции

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаОбмена(ВхИмяФайлаПравил)

	ЗагрузитьПравила(ВхИмяФайлаПравил);
	
КонецПроцедуры // ЗагрузитьПравилаОбмена()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура Выгрузить(ВхИмяФайлаПравил, ВхИмяФайлаДанных)

	ВыполнитьВыгрузкуДанных(ВхИмяФайлаПравил, ВхИмяФайлаДанных);
	
	Если Форма.МодальныйРежим() = 0 Тогда
		Предупреждение("Выгрузка данных завершена.");
	Иначе
		Сообщить("Выгрузка данных завершена.");
	КонецЕсли;
	
	Форма.Параметр = СписокОшибок;
	
КонецПроцедуры // Выгрузить()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗафиксироватьОшибку(ТекстОшибки)
	
	СписокОшибок.ДобавитьЗначение(ТекстОшибки);
	
КонецПроцедуры // ЗафиксироватьОшибку()


//_______________________________________________________________________________________________________________________________

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ ОБМЕНА
////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьСписокМетаданныхПоТипу(ВхТаблицаМетаданные, ВхМета, ВхТип)
	
	ВрмВозврат = СоздатьОбъект("СписокЗначений");
	
	Если ВхТип="Документ" Тогда
		
		ВрмМетаданные = Метаданные.Документ();
		
	ИначеЕсли ВхТип="Справочник" Тогда
		
		ВрмМетаданные = Метаданные.Справочник();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Для ВрмИнд = 1 По ВрмМетаданные Цикл
		
		ВрмИД = "";

		Если ВхТип = "Документ" Тогда
			
			ВрмЭлементМД = Метаданные.Документ(ВрмИнд);
			ВрмИД = ВхМета.GetDocID(ВрмЭлементМД.Идентификатор);
		
		ИначеЕсли ВхТип = "Справочник" Тогда
			
			ВрмЭлементМД = Метаданные.Справочник(ВрмИнд);
			ВрмИД = ВхМета.GetRefID(ВрмЭлементМД.Идентификатор);

		Иначе

			Продолжить;
			
		КонецЕсли;
		
		ВхТаблицаМетаданные.НоваяСтрока();
		ВхТаблицаМетаданные.ТекущаяСтрока(ВхТаблицаМетаданные.КоличествоСтрок());

		ВхТаблицаМетаданные.Ид = ВрмИД;
		ВхТаблицаМетаданные.ИдБД = СокрЛП(_idtostr(ВрмИД));
		ВхТаблицаМетаданные.ПолноеИмя = ВхТип + "." + ВрмЭлементМД.Идентификатор;
		ВхТаблицаМетаданные.Тип = ВхТип;
		ВхТаблицаМетаданные.Вид = ВрмЭлементМД.Идентификатор;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокМетаданныхИзМД(ВхТаблицаМетаданные)
	
	ВрмМета = СоздатьОбъект("MetaDataWork");
	
	ЗаполнитьСписокМетаданныхПоТипу(ВхТаблицаМетаданные, ВрмМета, "Справочник");
	ЗаполнитьСписокМетаданныхПоТипу(ВхТаблицаМетаданные, ВрмМета, "Документ");

	мНастройкиОбмена.Установить("СохранитьНастройки", 1);
	
	ВрмМета = 0;
	
КонецПроцедуры

Процедура ИнициализироватьНастрокиОбмена()
	
	мНастройкиОбмена = СоздатьОбъект("СписокЗначений");
	мНастройкиОбмена.ДобавитьЗначение(0, "СохранитьНастройки");
	мНастройкиОбмена.ДобавитьЗначение(0, "НастройкиЗагружены");
	мНастройкиОбмена.ДобавитьЗначение(0, "КаталогОбменаСуществует");
	мНастройкиОбмена.ДобавитьЗначение(СоздатьОбъект("СписокЗначений"), "УзлыОбмена");

	ВрмТаблицаМетаданные = СоздатьОбъект("ТаблицаЗначений");
	ВрмТаблицаМетаданные.НоваяКолонка("Ид", "Число");
	ВрмТаблицаМетаданные.НоваяКолонка("ИдБД", "Строка");
	ВрмТаблицаМетаданные.НоваяКолонка("ПолноеИмя", "Строка");
	ВрмТаблицаМетаданные.НоваяКолонка("Тип", "Строка");
	ВрмТаблицаМетаданные.НоваяКолонка("Вид", "Строка");

	мНастройкиОбмена.ДобавитьЗначение(ВрмТаблицаМетаданные, "Метаданные");
		
КонецПроцедуры

Функция ЗагрузитьНастройкиОбмена()

	ВрмВозврат = 0;

	ВрмИмяФайлаНастройки = мКаталогОбмена + "settings.xml";
	
	ИнициализироватьНастрокиОбмена();
	
	мНастройкиОбмена.Установить("КаталогОбменаСуществует", ФС.СуществуетФайл(мКаталогОбмена));
	
	Если ФС.СуществуетФайл(ВрмИмяФайлаНастройки) = 0 Тогда

		Возврат 1;
		
	КонецЕсли;
	
	ВрмСписокУзловОбмена = СоздатьОбъект("СписокЗначений");
	
	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	ВрмДокументXML = ВрмПарсерХМЛ.СоздатьДокумент();
	ВрмДокументXML.Кодировка = "UTF-8";
	ВрмДокументXML.Загрузить(ВрмИмяФайлаНастройки);
	
	ВрмУзлыОбъекты = ВрмДокументXML.ВыбратьУзлы("//exchanges/object");
	
	Для ВрмИндексУзелОбъект = 0 По ВрмУзлыОбъекты.КоличествоУзлов() - 1 Цикл
		
		ВрмУзелОбъект = ВрмУзлыОбъекты.ПолучитьУзел(ВрмИндексУзелОбъект);
		//Сообщить(ВрмУзелОбъект.ПредставлениеXML);
		ВрмУзелОбменаИдентификатор = ВрмУзелОбъект.ПолучитьАтрибут("id");
		
		ВрмСписокПараметры = СоздатьОбъект("СписокЗначений");

		ВрмУзлыПараметры = ВрмУзелОбъект.ВыбратьУзлы(".//param");
		Для ВрмИндексУзелПараметр = 0 По ВрмУзлыПараметры.КоличествоУзлов() - 1 Цикл
		
			ВрмУзелПараметр = ВрмУзлыПараметры.ПолучитьУзел(ВрмИндексУзелПараметр);
			ВрмПараметрИмя = ВрмУзелПараметр.ПолучитьАтрибут("name");
			ВрмПараметрЗначение = ВрмУзелПараметр.ПолучитьАтрибут("value");
			ВрмСписокПараметры.ДобавитьЗначение(ВрмПараметрЗначение, ВрмПараметрИмя);
			//Сообщить("[" + ВрмУзелОбменаИдентификатор + "][" + ВрмПараметрИмя + "][" + ВрмПараметрЗначение + "]");
			ВрмУзелПараметр = 0;

		КонецЦикла;
		
		ВрмСписокУзловОбмена.ДобавитьЗначение(ВрмСписокПараметры, ВрмУзелОбменаИдентификатор);
		
		ВрмУзелОбъект = 0;
		ВрмУзлыПараметры = 0;

	КонецЦикла;
	
	Если ВрмСписокУзловОбмена.РазмерСписка() = 0 Тогда
		ЗаполнитьСписокУзловИзБД(ВрмСписокУзловОбмена);
	КонецЕсли;

	мНастройкиОбмена.Установить("УзлыОбмена", ВрмСписокУзловОбмена);

	ВрмУзлыОбъекты = 0;

	//ВрмСписокМетаданных = СоздатьОбъект("СписокЗначений");
	ВрмТаблицаМетаданные = мНастройкиОбмена.Получить("Метаданные");
	ВрмУзлыЭлементы = ВрмДокументXML.ВыбратьУзлы("//metadata/object");
		
	Для ВрмИнд = 0 По ВрмУзлыЭлементы.КоличествоУзлов() - 1 Цикл	
		
		ВрмУзелЭлемент	= ВрмУзлыЭлементы.ПолучитьУзел(ВрмИнд);
		// ВрмПредставление = ВрмУзелЭлемент.ПолучитьАтрибут("name");
		// ВрмИд = Число(ВрмУзелЭлемент.ПолучитьАтрибут("id"));
		
		ВрмТаблицаМетаданные.НоваяСтрока();
		ВрмТаблицаМетаданные.ТекущаяСтрока(ВрмТаблицаМетаданные.КоличествоСтрок());

		ВрмТаблицаМетаданные.Ид = Число(ВрмУзелЭлемент.ПолучитьАтрибут("id"));
		ВрмТаблицаМетаданные.ИдБД = ВрмУзелЭлемент.ПолучитьАтрибут("id_db");
		ВрмТаблицаМетаданные.ПолноеИмя = ВрмУзелЭлемент.ПолучитьАтрибут("name");
		ВрмТаблицаМетаданные.Тип = ВрмУзелЭлемент.ПолучитьАтрибут("type");
		ВрмТаблицаМетаданные.Вид = ВрмУзелЭлемент.ПолучитьАтрибут("kind");
		
		ВрмУзелЭлемент = 0;

	КонецЦикла;

	Если ВрмТаблицаМетаданные.КоличествоСтрок() = 0 Тогда
		ЗаполнитьСписокМетаданныхИзМД(ВрмТаблицаМетаданные);
	КонецЕсли;
	
	мНастройкиОбмена.Установить("Метаданные", ВрмТаблицаМетаданные);
	мНастройкиОбмена.Установить("НастройкиЗагружены", 1);

	ВрмУзлыЭлементы = 0;

	ВрмДокументXML = 0;
	ВрмПарсерХМЛ = 0;
	
	Возврат 1;

КонецФункции

Функция СохранитьНастройкиОбмена(ВхНастройкиОбмена)
	
	ВрмВозврат = 0;

	Если ПустоеЗначение(ВхНастройкиОбмена) = 1 Тогда
		Возврат ВрмВозврат;
	КонецЕсли;

	ВрмИмяФайлаНастройки = мКаталогОбмена + "settings.xml";

	Если Число(ВхНастройкиОбмена.Получить("КаталогОбменаСуществует")) = 0 Тогда
		ФС.СоздатьКаталог(мКаталогОбмена);
	КонецЕсли;

	Если Число(ВхНастройкиОбмена.Получить("СохранитьНастройки")) = 1 Тогда

	ИначеЕсли Число(ВхНастройкиОбмена.Получить("НастройкиЗагружены")) = 0 Тогда
		
	Иначе
		Возврат ВрмВозврат;
	КонецЕсли;

	ВрмПарсерХМЛ = ПолучитьCOMОбъект("AddIn.XMLParser");
	
	ВрмДокументXML = ВрмПарсерХМЛ.СоздатьДокумент();
	ВрмДокументXML.Кодировка = "UTF-8";
	
	ВрмУзелНастройки = ЗаписатьЭлемент(ВрмДокументXML, ВрмДокументXML, "settings");

	//Узлы обмена
	ВрмУзелОбъекты = ЗаписатьЭлемент(ВрмДокументXML, ВрмУзелНастройки, "exchanges");

	ВрмСписокУзловОбмена = ВхНастройкиОбмена.Получить("УзлыОбмена");
	
	Для ВрмИндексСпискаПараметров = 1 По ВрмСписокУзловОбмена.РазмерСписка() Цикл

		ВрмУзелОбменаИдентификатор = "";
		ВрмСписокПараметры = ВрмСписокУзловОбмена.ПолучитьЗначение(ВрмИндексСпискаПараметров, ВрмУзелОбменаИдентификатор);
		
		ВрмУзелОбъект = ЗаписатьЭлемент(ВрмДокументXML, ВрмУзелОбъекты, "object");
		УстановитьАтрибут(ВрмУзелОбъект, "id", ВрмУзелОбменаИдентификатор);

		Для ВрмИндексПараметр = 1 По ВрмСписокПараметры.РазмерСписка() Цикл
			
			ВрмУзелПараметр = ЗаписатьЭлемент(ВрмДокументXML, ВрмУзелОбъект, "param");

			ВрмПараметрИмя = "";
			ВрмПараметрЗначение = ВрмСписокПараметры.ПолучитьЗначение(ВрмИндексПараметр, ВрмПараметрИмя);
			УстановитьАтрибут(ВрмУзелПараметр, "name", ВрмПараметрИмя);
			УстановитьАтрибут(ВрмУзелПараметр, "value", ВрмПараметрЗначение);

			ВрмУзелПараметр = 0;

		КонецЦикла;

		ВрмУзелОбъект = 0;
		
	КонецЦикла;

	ВрмУзелОбъекты = 0;

	//Метаданные
	ВрмУзелМетаданные = ЗаписатьЭлемент(ВрмДокументXML, ВрмУзелНастройки, "metadata");
	
	ВрмТаблицаМетаданные = ВхНастройкиОбмена.Получить("Метаданные");
	
	Для ВрмИндексМетаданные = 1 По ВрмТаблицаМетаданные.КоличествоСтрок() Цикл
		
		ВрмУзелЭлемент = ЗаписатьЭлемент(ВрмДокументXML, ВрмУзелМетаданные, "object");
		УстановитьАтрибут(ВрмУзелЭлемент, "id", ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "Ид"));
		УстановитьАтрибут(ВрмУзелЭлемент, "id_db", ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "ИдБД"));
		УстановитьАтрибут(ВрмУзелЭлемент, "name", ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "ПолноеИмя"));
		УстановитьАтрибут(ВрмУзелЭлемент, "type", ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "Тип"));
		УстановитьАтрибут(ВрмУзелЭлемент, "kind", ВрмТаблицаМетаданные.ПолучитьЗначение(ВрмИндексМетаданные, "Вид"));

		ВрмУзелЭлемент = 0;
		
	КонецЦикла;

	ВрмУзелМетаданные = 0;

	Попытка
		ВрмДокументXML.Записать(ВрмИмяФайлаНастройки);
		ВрмВозврат = 1;
	Исключение

	КонецПопытки;

	ВрмУзлыОбъекты = 0;
	ВрмДокументXML = 0;
	ВрмПарсерХМЛ = 0;
	
	Возврат ВрмВозврат;
		
КонецФункции

Функция ТестСоединения(ВхURLВебСервиса, ВхСписокПараметры)

	// http://192.168.132.1:2000/local_file_buch_demo
	// ВрмВозврат = СоздатьОбъект("СписокЗначений");
	// ВрмВозврат.Установить("СтатусВозврата", 0);

	ВрмНомерВерсияСервиса = "2.0.1.6";

	ВрмПараметры = СоздатьОбъект("СписокЗначений");
	ВрмПараметры.Установить("InterfaceName", "ОбменДанными");

	ВрмТелоЗапроса = ПолучитьТекстЗапрооса("GetVersions", "http://www.1c.ru/SaaS/1.0/WS", ВрмПараметры);
	ВрмВозврат = ЗапросSOAP(ВхURLВебСервиса, "InterfaceVersion", ВрмТелоЗапроса);

	Если Число(ВрмВозврат.Получить("СтатусВозврата")) = 0 Тогда
		Возврат ВрмВозврат;
	КонецЕсли;
	
	ВрмВерсииСервиса = ПолучитьВерсииСервиса(ВрмВозврат.Получить("Результат"));

	ВрмНайденаТребуемаяВерсия = 0;

	Для ВрмИндексВерсииСервиса = 1 По ВрмВерсииСервиса.РазмерСписка() Цикл

		Если ВрмВерсииСервиса.ПолучитьЗначение(ВрмИндексВерсииСервиса) = ВрмНомерВерсияСервиса Тогда
			ВрмНайденаТребуемаяВерсия = 1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ВрмНайденаТребуемаяВерсия = 0 Тогда
		ВрмВозврат.Установить("СтатусВозврата", 0);
		ВрмВозврат.Установить("ОписаниеОшибки", "Требуется версия сервиса " + ВрмНомерВерсияСервиса);
	КонецЕсли;
	
	ВхСписокПараметры.Установить("soap_uri", ВхURLВебСервиса);
	ВхСписокПараметры.Установить("soap_ver", ВрмНомерВерсияСервиса);

	Возврат ВрмВозврат;

КонецФункции

//*******************************************
Процедура Сформировать()
	//sdfsdfsdf
КонецПроцедуры

//*****************************************************************************

Функция ИнициализироватьКомпоненту(ВхКомпонента)
	
	ВрмВозврат = 0;

	Компоненты = СоздатьОбъект("ТаблицаЗначений");
	Компоненты.НоваяКолонка("Путь");
	Компоненты.НоваяКолонка("МожноЗагружать");
	
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогПрограммы() + ВхКомпонента;
	Компоненты.МожноЗагружать	= 0;
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогИБ() + ВхКомпонента;
	Компоненты.МожноЗагружать	= 0;
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогИБ() + "ExtForms\" + ВхКомпонента;
	Компоненты.МожноЗагружать	= 0;

	Компоненты.ВыбратьСтроки();
	Пока Компоненты.ПолучитьСтроку() = 1 Цикл
		Компоненты.МожноЗагружать = ФС.СуществуетФайл(Компоненты.Путь);
	КонецЦикла;
	
	Если Компоненты.Итог("МожноЗагружать") = 0 Тогда
		ТекстОшибки = "Компонента " + ВхКомпонента + " не найдена!";
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение(ТекстОшибки, 60);
		Иначе
			Сообщить(ТекстОшибки);
			
			// Если ПустаяСтрока(ИмяКоманды) = 0 Тогда
			// 	ЗафиксироватьОшибку(ТекстОшибки);
			// 	Форма.Параметр = СписокОшибок;
			// 	СтатусВозврата(0);
			// 	Возврат ВрмВозврат;
			// КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВрмВозврат;
	КонецЕсли;
	
	//КомпонентаУспешноЗагружена = 0;
	Компоненты.ВыбратьСтроки();
	Пока Компоненты.ПолучитьСтроку() = 1 Цикл
		Если Компоненты.МожноЗагружать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВрмВозврат = ЗагрузитьВнешнююКомпоненту(Компоненты.Путь);
		
		Если ВрмВозврат = 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВрмВозврат = 0 Тогда
		ТекстОшибки = "Компонента " + ВхКомпонента + " не найдена!";
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение(ТекстОшибки, 60);
		Иначе
			Сообщить(ТекстОшибки);
			
			// Если ПустаяСтрока(ИмяКоманды) = 0 Тогда
			// 	ЗафиксироватьОшибку(ТекстОшибки);
			// 	Форма.Параметр = СписокОшибок;
			// 	СтатусВозврата(0);
			// 	Возврат;
			// КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВрмВозврат;
	КонецЕсли;

	// СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	// СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	ВхКомпонента);
	// СписокВозможныхМест.ДобавитьЗначение(КаталогПрограммы()	+	ВхКомпонента);
	// СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"ExtForms\"	+ ВхКомпонента);
	
	// ВрмПутьОбъекта = НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	// Если ЗагрузитьВнешнююКомпоненту(ВрмПутьОбъекта) <> 1	Тогда
	// 	Предупреждение("Компонента " + ВхКомпонента + " не найдена!");
	// 	Возврат 0;
	// КонецЕсли; 
	
	Возврат ВрмВозврат;
	
КонецФункции

Функция ИнициализироватьКомпоненты()
	
	ВрмВозврат = ИнициализироватьКомпоненту("v7plus.dll");
	Если ВрмВозврат = 1 Тогда
		ВрмВозврат = ИнициализироватьКомпоненту("1cpp.dll");
	КонецЕсли;

	Возврат ВрмВозврат;

КонецФункции

Процедура ПриОткрытии()

	СтатусВозврата(0);

	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда           
		Сообщить("Служебная обработка. Не для интерактивного режима.");
		Возврат;
	ИначеЕсли ТипЗначенияСтр(Форма.Параметр) <> "СписокЗначений" Тогда
		Сообщить("Не корректно передан параметр.");
		Возврат;
	КонецЕсли;
	
	ВрмСтатусВозврата = 0;

	ВрмФормаПараметры = Форма.Параметр;

	ВрмКоманда = ВрмФормаПараметры.Получить("Команда");
	ВрмПараметрыКоманды = ВрмФормаПараметры.Получить("ПараметрыКоманды");

	ИнициализироватьКомпоненты();

	Если ВрмКоманда = "ЗагрузитьНастройкиОбмена" Тогда
		ВрмСтатусВозврата = ЗагрузитьНастройкиОбмена();
		ВрмФормаПараметры.Установить("НастройкиОбмена", мНастройкиОбмена);
	ИначеЕсли ВрмКоманда = "СохранитьНастройкиОбмена" Тогда
		ВрмСтатусВозврата = СохранитьНастройкиОбмена(ВрмПараметрыКоманды.Получить("НастройкиОбмена"));
	ИначеЕсли ВрмКоманда = "АктивироватьУзелОбмена" Тогда
		ВрмСписокПараметры = ВрмПараметрыКоманды.Получить("СписокПараметры");
		ВрмСтатусВозврата = АктивироватьУзелОбмена(ВрмПараметрыКоманды.Получить("УзелОбменаИдентификатор"), ВрмСписокПараметры);
		ВрмФормаПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ИначеЕсли ВрмКоманда = "ВыполнитьВыгрузкуДанных" Тогда
		ВрмСписокПараметры = ВрмПараметрыКоманды.Получить("СписокПараметры");
		мНастройкиОбмена = ВрмПараметрыКоманды.Получить("НастройкиОбмена");
		ВрмРезультат = ВыполнитьВыгрузкуДанных(ВрмПараметрыКоманды.Получить("УзелОбменаИдентификатор"), ВрмСписокПараметры);
		ЗаполнитьЗначенияСвойств(ВрмФормаПараметры, ВрмРезультат, "Результат");
		// ВрмФормаПараметры.Установить("СписокПараметры", ВрмСписокПараметры);
	ИначеЕсли ВрмКоманда = "ТестСоединения" Тогда
		ВрмСписокПараметры = ВрмПараметрыКоманды.Получить("СписокПараметры");
		ВрмРезультат = ТестСоединения(ВрмПараметрыКоманды.Получить("URLВебСервиса"), ВрмСписокПараметры);
		ВрмСтатусВозврата = ВрмРезультат.Получить("СтатусВозврата");
		ВрмФормаПараметры.Установить("ОписаниеОшибки", ВрмРезультат.Получить("ОписаниеОшибки"));
	Иначе
		ВрмФормаПараметры.Установить("ОписаниеОшибки", "Команда [" + ВрмКоманда + "] отсутствет.");
	КонецЕсли;

	ВрмФормаПараметры.Установить("СтатусВозврата", ВрмСтатусВозврата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////////////////////////////////////////////////////////////////////////////////

мКаталогОбмена = КаталогИБ() + "Exchange\";

мКомментироватьВыгрузкуОбъектов = 1;
ВыводВПротоколИнформационныхСообщений = 1;

мНачалоНовогоЭлемента = 1;
мИнструкцияОбработки = 2;
мКонецУровня = 3;
мКонецДокумента = 4;

мКонвертацияПередВыгрузкойДанных = 0;
мКонвертацияПередВыгрузкойОбъекта = 0;
мКонвертацияПередКонвертациейОбъекта = 0;
мКонвертацияПередОтправкойИнформацииОбУдалении = 0;
мКонвертацияПослеВыгрузкиОбъекта = 0;
мКонвертацияПослеВыгрузкиДанных = 0;

мПустоеЗначение = ПолучитьПустоеЗначение();          

ТаблицаНастройкиПараметров = СоздатьОбъект("ТаблицаЗначений");
ТаблицаНастройкиПараметров.НоваяКолонка("Имя"); 
ТаблицаНастройкиПараметров.НоваяКолонка("Наименование",,,,"Наименование параметра"); 
ТаблицаНастройкиПараметров.НоваяКолонка("Значение",,,,"Значение параметра");   
ТаблицаНастройкиПараметров.НоваяКолонка("ТипЗначения");   
ТаблицаНастройкиПараметров.НоваяКолонка("ВидЗначения");   
// ТаблицаНастройкиПараметров.ВидимостьКолонки("Имя",0,); 
// ТаблицаНастройкиПараметров.ВидимостьКолонки("ТипЗначения",0,); 
// ТаблицаНастройкиПараметров.ВидимостьКолонки("ВидЗначения",0,);
                            
ТаблицаПараметровДляЗагрузки = СоздатьОбъект("ТаблицаЗначений");
ТаблицаПараметровДляЗагрузки.НоваяКолонка("Имя");        
ТаблицаПараметровДляЗагрузки.НоваяКолонка("Наименование");           

// ТаблицаНастройкиОтбора.НоваяКолонка("Использовать", "Число",,, "", 5);
// ТаблицаНастройкиОтбора.НоваяКолонка("ПолеОтбора", "Строка",,,"Реквизит отбора");
// ТаблицаНастройкиОтбора.НоваяКолонка("Условие", "Строка",,, "", 5); 
// ТаблицаНастройкиОтбора.НоваяКолонка("Значение");     
// ТаблицаНастройкиОтбора.НоваяКолонка("ТипОбъекта", "Строка");    
// ТаблицаНастройкиОтбора.НоваяКолонка("Объект", "Строка");     
// ТаблицаНастройкиОтбора.НоваяКолонка("Длина", "Число");     
// ТаблицаНастройкиОтбора.НоваяКолонка("Точность", "Число");    
// ТаблицаНастройкиОтбора.ВыводитьПиктограммы("Использовать");    
// ТаблицаНастройкиОтбора.ВидимостьКолонки("ТипОбъекта", 0);  
// ТаблицаНастройкиОтбора.ВидимостьКолонки("Объект", 0);  
// ТаблицаНастройкиОтбора.ВидимостьКолонки("Длина", 0);  
// ТаблицаНастройкиОтбора.ВидимостьКолонки("Точность", 0); 
                                 
ТипыУсловийДляСтрок = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляСтрок.ДобавитьЗначение("=");
ТипыУсловийДляСтрок.ДобавитьЗначение("<>");

ТипыУсловийДляЧисел = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляЧисел.ДобавитьЗначение("=");
ТипыУсловийДляЧисел.ДобавитьЗначение(">");
ТипыУсловийДляЧисел.ДобавитьЗначение("<");
ТипыУсловийДляЧисел.ДобавитьЗначение("<=");
ТипыУсловийДляЧисел.ДобавитьЗначение(">=");
ТипыУсловийДляЧисел.ДобавитьЗначение("<>");

ТипыУсловийДляСправочников = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляСправочников.ДобавитьЗначение("="); 
ТипыУсловийДляСправочников.ДобавитьЗначение("<>");
ТипыУсловийДляСправочников.ДобавитьЗначение("В");          
ТипыУсловийДляСправочников.ДобавитьЗначение("НЕ В");

ТаблицаРеквизитов = СоздатьОбъект("ТаблицаЗначений");
ТаблицаРеквизитов.НоваяКолонка("Ид", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Наименование", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Тип", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Вид", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Длина", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Точность", "Строка");
СписокОшибок = СоздатьОбъект("СписокЗначений");

мСообщенияОбОшибках			= СоздатьОбъект("СписокЗначений");

ВрмСтруктураОшибки = СоздатьОбъект("СписокЗначений");
ВрмСтруктураОшибки.ИзСтрокиСРазделителями("ИмяПКО,ИмяПОД,Нпп,ГНпп,Источник,ТипОбъекта,Свойство,Значение,ТипЗначения,ПКО,ПКС,ПКГС,ПВД,ПОД,Объект,СвойствоПриемника,КонвертируемоеЗначение,Обработчик,ОписаниеОшибки,ПозицияМодуля,Текст,КСообщенияОбОшибках,УзелПланаОбмена");
мСтруктураОшибки = СоздатьОбъект("СписокЗначений");
Для ВрмИндексОшибки = 1 По ВрмСтруктураОшибки.РазмерСписка() Цикл
	ВрмПредставление = ВрмСтруктураОшибки.ПолучитьЗначение(ВрмИндексОшибки);
	мСтруктураОшибки.Установить(ВрмПредставление, ПолучитьПустоеЗначение());
КонецЦикла;